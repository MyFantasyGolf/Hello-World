{"version":3,"sources":["../../server/src/db/resultsApi.js"],"names":["isNil","require","conn","moment","lastPlayerUpdate","season","db","coll","collection","findOne","year","updated","roster","lastDate","lastScheduleUpdate","schedulesUpdated","findOneAndUpdate","$set","format","upsert","saveTourSchedule","schedule","startDate","date","start","title","key","toLowerCase","replace","err","console","log","stack","getSchedules","truncate","find","toArray","results","scheduleList","sort","a","b","aEnd","end","bEnd","isBefore","getRoster","parseInt","players","saveRoster","saveResults","globalResultObject","forEach","result","complete","w","outcome","module","exports"],"mappings":"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","file":"resultsApi.js","sourcesContent":["const isNil = require('lodash/isNil');\nconst conn = require('./connection');\nconst moment = require('moment');\n\nconst lastPlayerUpdate = async (season) => {\n  const db = await conn.db;\n  const coll = db.collection('players');\n\n  const roster = await coll.findOne({\n    year: season\n  }, {\n    updated: 1\n  });\n\n  const lastDate = isNil(roster) || isNil(roster.updated) ?\n    moment('12-01-1970', 'MM-DD-YYYY') :\n    moment(roster.updated, 'MM-DD-YYYY HH:mm');\n\n  return lastDate;\n};\n\nconst lastScheduleUpdate = async (season) => {\n  const db = await conn.db;\n  const coll = db.collection('schedule_update');\n\n  const updated = await coll.findOne({\n    year: season\n  });\n\n  const lastDate = isNil(updated) || isNil(updated.updated) ?\n    moment('12-01-1970', 'MM-DD-YYYY') :\n    moment(updated.updated, 'MM-DD-YYYY HH:mm');\n\n  return lastDate;\n};\n\nconst schedulesUpdated = async (season) => {\n  const db = await conn.db;\n  const coll = db.collection('schedule_update');\n\n  coll.findOneAndUpdate({\n    year: season\n  }, {\n    $set: {\n      updated: moment().format('MM-DD-YYYY HH:mm'),\n      year: season\n    }\n  },\n  { upsert: true });\n};\n\nconst saveTourSchedule = async (schedule) => {\n  const startDate = moment(schedule.date.start, 'MM/DD/YYYY');\n\n  const db = await conn.db;\n  const coll = db.collection('schedules');\n\n  try {\n    coll.findOneAndUpdate(\n      { year: schedule.year, title: schedule.title },\n      { $set:\n        {\n          ...schedule,\n          key: schedule.title.toLowerCase().replace(/ /g, '').replace(/\\./g, '_')\n        }\n      },\n      { upsert: true }\n    );\n  }\n  catch(err) {\n    console.log(err.stack);\n  }\n};\n\nconst getSchedules = async (season, truncate = false) => {\n  const db = await conn.db;\n  const coll = db.collection('schedules');\n  if (truncate === false) {\n    return await coll.find({year: season}).toArray();\n  }\n\n  const scheduleList = await coll.find(\n    {year: season},\n    {results: 0}).toArray();\n\n  scheduleList.sort( (a, b) => {\n    const aEnd = moment(a.date.end, 'MM/DD/YYYY');\n    const bEnd = moment(b.date.end, 'MM/DD/YYYY');\n\n    if (aEnd.isBefore(bEnd)) {\n      return 1;\n    }\n\n    return -1;\n  });\n\n  return scheduleList;\n};\n\nconst getRoster = async (season) => {\n  const db = await conn.db;\n  const coll = db.collection('players');\n  const results = await coll.find({year: parseInt(season)}).toArray();\n\n  return isNil(results[0]) ? [] : results[0].players;\n};\n\nconst saveRoster = async (season, roster) => {\n  const db = await conn.db;\n  const coll = db.collection('players');\n\n  try {\n    coll.findOneAndUpdate(\n      { year: season },\n      { $set:\n        {\n          ...roster,\n          year: season,\n          updated: moment().format('MM-DD-YYYY HH:mm')\n        }\n      },\n      { upsert: true }\n    );\n  }\n  catch( err ) {\n    console.log(err.stack);\n  }\n};\n\nconst saveResults = async (schedule, results) => {\n  const db = await conn.db;\n  const coll = db.collection('schedules');\n\n  try {\n    const globalResultObject = {};\n    results.forEach( async (result) => {\n      globalResultObject[result.key] = result;\n    });\n\n    if (moment(schedule.date.end, 'MM/DD/YYYY').isBefore(moment())) {\n      schedule.complete = true;\n      console.log(`${schedule.title} is complete.`);\n    }\n\n    const outcome = await coll.findOneAndUpdate(\n      { year: schedule.year, key: schedule.key },\n      { $set: { 'results': globalResultObject, 'complete': schedule.complete }},\n      { upsert: true, w: 1 }\n    );\n\n    console.log(`Saved: ${schedule.key}`);\n  }\n  catch(err) {\n    console.log(err.stack);\n  }\n};\n\nmodule.exports = {\n  saveTourSchedule,\n  getSchedules,\n  saveResults,\n  getRoster,\n  saveRoster,\n  lastPlayerUpdate,\n  lastScheduleUpdate,\n  schedulesUpdated\n};\n"]}