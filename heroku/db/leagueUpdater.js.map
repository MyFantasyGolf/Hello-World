{"version":3,"sources":["../../server/src/db/leagueUpdater.js"],"names":["conn","require","moment","isNil","isNumber","cloneDeep","season","leagueApi","resultsApi","ObjectId","getLeaguesToUpdate","userId","getLeaguesForUser","userLeagues","leaguesToUpdate","filter","league","lastUpdate","updated","diff","getSchedulesThatApply","leagueStarted","schedules","schedulesThatApply","schedule","scheduleEnd","date","end","isAfter","results","getScore","lowestCut","golferResult","relativeScore","isNaN","updateTeam","team","lastRoster","forEach","activeMap","activeRoster","key","i","activeGolfers","currentRoster","length","push","lowestScore","complete","Object","keys","reduce","min","golfer","golfer_results","score","updateLeague","teams","index","newTeam","update","db","coll","collection","getSchedules","getSeason","empty_league","getLeague","_id","draft","completed","sort","s1","s2","s1Start","s2Start","isBefore","newLeague","console","log","findOneAndUpdate","$set","format","name","module","exports"],"mappings":"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","file":"leagueUpdater.js","sourcesContent":["const conn = require('./connection');\nconst moment = require('moment');\nconst isNil = require('lodash/isNil');\nconst isNumber = require('lodash/isNumber');\nconst cloneDeep = require('lodash/cloneDeep');\nconst season = require('../utils/season');\nconst leagueApi = require('./leagueApi');\nconst resultsApi = require('./resultsApi');\nconst ObjectId = require('mongodb').ObjectId;\n\nconst getLeaguesToUpdate = async (userId) => {\n  const userLeagues = await leagueApi.getLeaguesForUser(userId);\n  const leaguesToUpdate = userLeagues.filter( (league) => {\n    const lastUpdate = isNil(league.updated) ?\n      moment('12-01-1970', 'MM-DD-YYYY') :\n      moment(league.updated, 'MM-DD-YYYY');\n\n    return moment().diff(lastUpdate, 'hours') > 23;\n  });\n\n  return leaguesToUpdate;\n};\n\nconst getSchedulesThatApply = (leagueStarted, schedules) => {\n\n  const schedulesThatApply = schedules.filter( (schedule) => {\n    const scheduleEnd = moment(schedule.date.end, 'MM/DD/YYYY');\n\n    return scheduleEnd.isAfter(leagueStarted) &&\n      !isNil(schedule.results);\n  });\n\n  return schedulesThatApply;\n};\n\nconst getScore = (lowestCut, golferResult) => {\n\n  if (isNil(golferResult) ||\n    isNil(golferResult.relativeScore) ||\n    isNaN(golferResult.relativeScore) ||\n    !isNumber(golferResult.relativeScore)) {\n    return lowestCut + 1;\n  }\n  return golferResult.relativeScore;\n};\n\nconst updateTeam = async (team, league, schedules) => {\n  let lastRoster = null;\n\n  schedules.forEach( (schedule) => {\n\n    if (isNil(team.activeMap)) {\n      team.activeMap = {};\n    }\n\n    let activeRoster = team.activeMap[schedule.key];\n\n    if (isNil(activeRoster)) {\n      if (!isNil(lastRoster)) {\n        activeRoster = lastRoster;\n      }\n      else {\n        activeRoster = [];\n        for (let i = 0; i < league.activeGolfers && i < team.currentRoster.length; i++) {\n          activeRoster.push({ key: team.currentRoster[i].key });\n        }\n      }\n    }\n\n    lastRoster = activeRoster;\n\n    const lowestScore = schedule.complete === false ?\n      0\n      :\n      Object.keys(schedule.results).reduce( (min, key) => {\n      const golferResult = schedule.results[key];\n\n      if ( !isNumber(golferResult.relativeScore)) {\n        return min;\n      }\n\n      return golferResult.relativeScore > min ?\n        golferResult.relativeScore : min;\n    }, -100);\n\n    activeRoster.forEach( (golfer) => {\n      const golfer_results = !isNil(schedule) && !isNil(schedule.results) ?\n        schedule.results[golfer.key] : null;\n\n      golfer.score = getScore(lowestScore, golfer_results);\n    });\n\n    team.activeMap[schedule.key] = cloneDeep(activeRoster);\n  });\n\n  return team;\n};\n\nconst updateLeague = async (league, schedules) => {\n  league.teams.forEach( async (team, index) => {\n    const newTeam = await updateTeam(team, league,schedules);\n    league.teams[index] = newTeam;\n  });\n\n  return league;\n};\n\nconst update = async (userId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  const leaguesToUpdate = await getLeaguesToUpdate(userId);\n  const schedules = await resultsApi.getSchedules(season.getSeason(moment()));\n\n  leaguesToUpdate.forEach( async (empty_league) => {\n\n    const league = await leagueApi.getLeague(empty_league._id);\n\n    const leagueStarted = isNil(league.draft) ||\n      isNil(league.draft.completed) ?\n      moment() : moment(league.draft.completed, 'MM-DD-YYYY');\n\n    const schedulesThatApply =\n      getSchedulesThatApply(leagueStarted, schedules);\n\n    schedulesThatApply.sort( (s1, s2) => {\n      const s1Start = moment(s1.date.end, 'MM/DD/YYYY');\n      const s2Start = moment(s1.date.end, 'MM/DD/YYYY');\n\n      if (s1Start.isBefore(s2Start)) {\n        return 1;\n      }\n      else if (s2Start.isBefore(s1Start)) {\n        return -1;\n      }\n\n      return 0;\n    });\n\n    const newLeague = await updateLeague(league, schedulesThatApply);\n\n    console.log('O leagueUpdater: 142');\n    await coll.findOneAndUpdate({\n      '_id': ObjectId(league._id)\n    }, {\n      $set: {'teams': newLeague.teams, updated: moment().format('MM-DD-YYYY')}\n    });\n    console.log('D leagueUpdater: 142');\n\n    console.log(`finished updating league. ${league.name}`);\n  });\n};\n\nmodule.exports = {\n  update\n};\n"]}