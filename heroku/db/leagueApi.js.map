{"version":3,"sources":["../../server/src/db/leagueApi.js"],"names":["conn","require","season","userApi","moment","isNil","isString","ObjectId","resultsApi","updateLeague","league","db","coll","collection","leagueId","_id","findOneAndUpdate","getSeason","console","log","legaueId","getLeaguesForUser","userId","find","teams","$elemMatch","user","projection","draft","toArray","leagues","getLeagueInvitations","getUserById","invitations","email","name","commissioner","acceptInvitation","teamName","findOne","newInvitations","filter","invite","push","draftList","currentRoster","activeMap","$set","declineInvitation","id","getLeague","getLeagueSchedules","leagueStarted","completed","getSchedules","schedules","results","schedule","scheduleEnd","date","end","isAfter","createLeague","state","settings","rounds","insertOne","unregisteredUsers","forEach","trim","registerUser","saveLeague","getAvailablePlayers","aggregate","megaMatch","signedPlayers","team","player","filteredList","players","index","findIndex","sp","key","module","exports"],"mappings":"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","file":"leagueApi.js","sourcesContent":["const conn = require('./connection');\nconst season = require('../utils/season');\nconst userApi = require('./userApi');\nconst moment = require('moment');\nconst isNil = require('lodash/isNil');\nconst isString = require('lodash/isNil');\nconst ObjectId = require('mongodb').ObjectId;\nconst resultsApi = require('./resultsApi');\n\nconst updateLeague = async (league) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  const leagueId = isString(league) ?\n    league : league._id;\n\n  try {\n    await coll.findOneAndUpdate({\n      '_id': ObjectId(leagueId),\n      'season': season.getSeason(moment())\n    },\n    league);\n  }\n  catch(err) {\n    console.log(`Error saving league ${legaueId}`);\n  }\n};\n\nconst getLeaguesForUser = async (userId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  try {\n    const leagues = await coll.find({ teams:\n      {\n        $elemMatch: {\n          user: userId\n        }\n      }\n    }, {\n      projection: {draft: 0}\n    }).toArray();\n\n    return leagues;\n  }\n  catch(err) {\n    console.log(`Error finding league: ${err}`);\n  }\n};\n\nconst getLeagueInvitations = async (userId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  try {\n    const user = await userApi.getUserById(userId);\n    const leagues = await coll.find({ invitations:\n      {\n        $elemMatch: {\n          email: user.email\n        }\n      }\n    }, {\n      projection: {name: 1, commissioner: 1, _id: 1}\n    }).toArray();\n\n    return leagues;\n  }\n  catch(err) {\n    console.log(`Error saving league: ${err}`);\n  }\n};\n\nconst acceptInvitation = async (userId, leagueId, teamName) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  const invitations = await coll.findOne({\n    '_id': ObjectId(leagueId)\n  }, {\n    projection: {invitations: 1, teams: 1}\n  });\n\n  const user = await userApi.getUserById(userId);\n\n  const newInvitations = invitations.invitations.filter( (invite) => {\n    return invite.email !== user.email;\n  });\n\n  invitations.teams.push({\n    name: teamName,\n    user: userId,\n    draftList: [],\n    currentRoster: [],\n    activeMap: {}\n  });\n\n  await coll.findOneAndUpdate({\n    '_id': ObjectId(leagueId)\n  }, {\n    $set: {\n      invitations: newInvitations,\n      teams: invitations.teams\n    }\n  });\n};\n\nconst declineInvitation = async (userId, leagueId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  const invitations = await coll.findOne({\n    '_id': ObjectId(leagueId)\n  }, {\n    projection: {invitations: 1}\n  });\n\n  const newInvitations = invitations.invitations.filter( (invite) => {\n    return invite.id !== userId;\n  });\n\n  await coll.findOneAndUpdate({\n    '_id': ObjectId(leagueId)\n  }, {\n    $set: {\n      invitations: newInvitations\n    }\n  });\n};\n\nconst getLeague = async( leagueId ) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  const league = await coll.findOne({\n    '_id': ObjectId(leagueId),\n    'season': season.getSeason(moment())\n  });\n\n  return league;\n};\n\nconst getLeagueSchedules = async (leagueId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  try {\n    const league = await getLeague(leagueId);\n    const leagueStarted = moment(league.draft.completed, 'MM-DD-YYYY');\n\n    const schedules = await resultsApi.getSchedules(league.season, true);\n\n    const results = schedules.filter( (schedule) => {\n      const scheduleEnd = moment(schedule.date.end, 'MM/DD/YYYY');\n\n      return scheduleEnd.isAfter(leagueStarted);\n    })\n\n    return results;\n  }\n  catch(err) {\n    console.log(`Error finding schedules for league: ${err}`);\n  }\n};\n\nconst createLeague = async (league) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  try {\n    league.season = season.getSeason(moment());\n    league.draft = {\n      state: 'PREDRAFT',\n      settings: {},\n      rounds: []\n    };\n\n    await coll.insertOne({ ...league });\n\n    // now create users that aren't registered\n    const unregisteredUsers = league.invitations.filter( (invite) => {\n      return isNil(invite.id);\n    });\n\n    unregisteredUsers.forEach( (user) => {\n      user.email = user.email.trim();\n      userApi.registerUser(user, false);\n    });\n  }\n  catch(err) {\n    console.log(`Error saving league: ${err}`);\n  }\n};\n\nconst saveLeague = async(league) => {\n  if (!isNil(league._id)) {\n    return updateLeague(league)\n  }\n\n  return createLeague(league);\n}\n\nconst getAvailablePlayers = async (leagueId) => {\n  const db = await conn.db;\n  const coll = db.collection('leagues');\n\n  try {\n    const megaMatch = await coll.aggregate([\n      { \"$match\": {\"_id\": ObjectId(leagueId)}},\n      { \"$lookup\":\n        {\n          \"from\": \"players\",\n          \"localField\":\n          \"season\",\n          \"foreignField\": \"year\",\n          \"as\": \"players\"\n        }\n      }]).toArray();\n\n    const league = await getLeague(leagueId);\n    const signedPlayers = [];\n\n    league.teams.forEach( (team) => {\n      if (isNil(team.currentRoster)) {\n        return;\n      }\n\n      team.currentRoster.forEach( (player) => {\n        signedPlayers.push(player);\n      });\n    })\n\n    const filteredList = megaMatch[0].players[0].players.filter( (player) => {\n      const index = signedPlayers.findIndex( (sp) => {\n        return sp.key === player.key;\n      });\n\n      return index === -1;\n    });\n\n    return filteredList;\n  }\n  catch(err) {\n    console.log(`Error getting player list ${err}`);\n  }\n\n  return [];\n};\n\nmodule.exports = {\n  saveLeague,\n  getLeaguesForUser,\n  getAvailablePlayers,\n  getLeague,\n  getLeagueInvitations,\n  acceptInvitation,\n  declineInvitation,\n  getLeagueSchedules\n};\n"]}