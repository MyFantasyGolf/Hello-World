{"version":3,"sources":["../../server/src/services/leagueManagement.js"],"names":["isNil","require","leagueApi","draftApi","getMyLeagues","request","response","userId","session","getLeaguesForUser","leagues","send","getLeagueSchedules","leagueId","params","schedules","getMyInvitations","getLeagueInvitations","invites","acceptInvitation","teamName","declineInvitation","getLeague","league","createLeague","body","name","commissioner","status","saveLeague","getAvailablePlayers","players","getDraft","draft","getDraftList","teamId","updateDraftList","newList","draftList","startDraft","draftOptions","getDraftStatus","draftStatus","makeDraftPick","round","pick","selection","makePick","parseInt","module","exports"],"mappings":"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","file":"leagueManagement.js","sourcesContent":["const isNil = require('lodash/isNil');\nconst leagueApi = require('../db/leagueApi');\nconst draftApi = require('../db/draftApi');\n\nconst getMyLeagues = async (request, response) => {\n\n  const userId = request.session.userId;\n\n  const leagues = await leagueApi.getLeaguesForUser(userId);\n\n  response.send({leagues: leagues});\n};\n\nconst getLeagueSchedules = async(request, response) => {\n  const leagueId = request.params.leagueId;\n\n  const schedules = await leagueApi.getLeagueSchedules(leagueId);\n  response.send({schedules});\n}\n\nconst getMyInvitations = async (request, response) => {\n  const userId = request.session.userId;\n\n  const invites = await leagueApi.getLeagueInvitations(userId);\n  response.send({leagues: invites});\n};\n\nconst acceptInvitation = async (request, response) => {\n  const userId = request.session.userId;\n  const leagueId = request.params.leagueId;\n  const teamName = request.params.teamName;\n\n  await leagueApi.acceptInvitation(userId, leagueId, teamName)\n  response.send({'status': 'success'});\n};\n\nconst declineInvitation = async (request, response) => {\n  const userId = request.session.userId;\n  const leagueId = request.params.leagueId;\n\n  await leagueApi.declineInvitation(userId, leagueId)\n  response.send({'status': 'success'});\n};\n\nconst getLeague = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  const league = await leagueApi.getLeague(leagueId);\n\n  response.send({league});\n};\n\nconst createLeague = async (request, response) => {\n  const league = request.body;\n\n  if (isNil(league.name) ||\n    isNil(league.commissioner)) {\n    response.status(500).send('A league name and commissioner are required.');\n    return;\n  }\n\n  await leagueApi.saveLeague(league);\n  response.send({status: 'success'});\n};\n\nconst getAvailablePlayers = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('Invalid league ID.');\n    return;\n  }\n\n  const players = await leagueApi.getAvailablePlayers(leagueId);\n  response.send({players: players});\n};\n\nconst getDraft = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('League ID required');\n    return;\n  }\n\n  const draft = await draftApi.getDraft(leagueId);\n  response.send(draft);\n};\n\nconst getDraftList = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const teamId = request.session.userId;\n\n  if (isNil(leagueId) || isNil(teamId) || leagueId === 'undefined') {\n    response.status(500).send('Insufficient information provided.');\n    return;\n  }\n\n  const players = await draftApi.getDraftList(leagueId, teamId);\n  response.send({players: players});\n};\n\nconst updateDraftList = async (request, response) => {\n  const newList = request.body.draftList;\n  const leagueId = request.params.leagueId;\n  const userId = request.session.userId;\n\n  if (isNil(userId) || isNil(leagueId)) {\n    response.send(500).send('Insufficient information provided.');\n    return;\n  }\n\n  await draftApi.updateDraftList(leagueId, userId, newList);\n  response.send({'status': 'Success'});\n};\n\nconst startDraft = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const draftOptions = request.body.draftOptions;\n\n  if (isNil(draftOptions) || isNil(leagueId)) {\n    response.status(500).send('Not enough information to start draft');\n    return;\n  }\n\n  await draftApi.startDraft(leagueId, draftOptions);\n  response.send({'status': 'Success'});\n};\n\nconst getDraftStatus = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('Not a valid league ID');\n    return;\n  }\n\n  const status = await draftApi.draftStatus(leagueId);\n  response.send(status);\n  return;\n};\n\nconst makeDraftPick = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const round = request.params.round;\n  const pick = request.params.pick;\n  const selection = request.body;\n\n  if (isNil(leagueId) || isNil(round) || isNil(pick) || isNil(selection)) {\n    response.status(500).send('Not enough information to make a valid pick.');\n    return;\n  }\n\n  await draftApi.makePick(leagueId,\n    parseInt(round) - 1,\n    parseInt(pick) - 1,\n    selection);\n  response.send({ 'status': 'success'});\n}\n\nmodule.exports = {\n  getMyLeagues,\n  getAvailablePlayers,\n  getLeague,\n  createLeague,\n  getDraftList,\n  updateDraftList,\n  startDraft,\n  getDraft,\n  getDraftStatus,\n  makeDraftPick,\n  getMyInvitations,\n  acceptInvitation,\n  declineInvitation,\n  getLeagueSchedules\n};\n"]}