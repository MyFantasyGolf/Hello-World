{"version":3,"sources":["../../../server/src/scrapers/espn/update.js"],"names":["cheerio","require","fs","path","request","asyncRequest","moment","sleep","isNil","season","resultsApi","EspnUpdater","year","getSeason","lastScheduleUpdate","lastUpdated","diff","shouldIUpdate","shouldUpdate","html","updateSchedules","schedulez","webSchedules","scrapeSchdule","getSchedules","schedules","schedulesToFix","filter","ws","found","find","ss","key","title","toLowerCase","replace","complete","forEach","schedule","saveTourSchedule","i","length","espnUrl","console","log","results","scrapeScheduleResults","saveResults","sleeper","parseInt","Math","random","$","load","rows","seasonString","text","entries","each","index","row","tds","texts","map","td","elm","children","name","a","arr","push","attr","get","tournaments","entry","tourney","date","sanitizeDate","start","t","course","winner","score","purse","lastWinner","seasonText","dateString","years","split","startYear","endYear","days","parseDate","trim","format","end","mDate","month","resultsPage","parseResultRow","positionStr","totalScore","officialAmountStr","cupPoints","round1","round2","round3","round4","relativeScore","nameArray","lastName","pop","firstName","join","position","tied","startsWith","pos","substr","rounds","officialAmount","parseFloat","module","exports"],"mappings":"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","file":"update.js","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs');\nconst path = require('path');\nconst request = require('request');\nconst asyncRequest = require('request-promise');\nconst moment = require('moment');\nconst sleep = require('../../utils/sleep');\nconst isNil = require('lodash/isNil');\n\nconst season = require('../../utils/season');\nconst resultsApi = require('../../db/resultsApi');\n\nclass EspnUpdater {\n\n  async shouldIUpdate() {\n    const year = season.getSeason(moment());\n    const lastUpdated = await resultsApi.lastScheduleUpdate(year);\n    return moment().diff(lastUpdated, 'hours') > 23;\n  }\n\n  async update() {\n\n    const shouldUpdate = await this.shouldIUpdate();\n\n    if ( shouldUpdate === false) {\n      return;\n    }\n\n    const html = await asyncRequest('http://www.espn.com/golf/schedule');\n    const schedulez = await this.updateSchedules(html);\n  }\n\n  async updateSchedules(html) {\n    const webSchedules = this.scrapeSchdule(html);\n\n    const schedules = await resultsApi.getSchedules(webSchedules[0].year);\n    const schedulesToFix = webSchedules.filter( (ws) => {\n      if (isNil(schedules)) {\n        return true;\n      }\n\n      const found = schedules.find( (ss) => {\n        if (ss.key === ws.title.toLowerCase().replace(/ /g, '')) {\n          return ss.complete;\n        }\n\n        return false;\n      });\n\n      return true;\n    });\n\n    // save these new schedules\n    schedulesToFix.forEach( (schedule) => {\n      schedule.complete = false;\n      resultsApi.saveTourSchedule(schedule)\n    });\n\n    return schedulesToFix;\n  }\n\n  /**\n  Run through the schedules and try to fill in results for\n  tournaments that have them.\n  **/\n  async updateResults() {\n\n    const shouldIUpdate = await this.shouldIUpdate();\n\n    if (shouldIUpdate === false) {\n      return;\n    }\n\n    const year = season.getSeason();\n\n    const schedules = await resultsApi.getSchedules(year);\n\n    for (let i = 0; i < schedules.length; i++ ) {\n    // schedules.forEach( async (schedule) => {\n      const schedule = schedules[i];\n\n      if (schedule.complete === true || isNil(schedule.espnUrl)) {\n        console.log(`Skipping ${schedule.title}`);\n        continue;\n      }\n\n      console.log(`Retrieving results for ${schedule.title}`);\n\n      const html = await asyncRequest(`http://espn.com${schedule.espnUrl}`);\n      if (!isNil(html)) {\n        const results = this.scrapeScheduleResults(html);\n        await resultsApi.saveResults(schedule, results);\n      }\n\n      const sleeper = parseInt((Math.random() * 3) + 1);\n      console.log(`Sleeping for ${sleeper} seconds.\\n`);\n      await sleep.sleep(sleeper);\n    }\n  }\n\n  scrapeSchdule(html) {\n    const $ = cheerio.load(html);\n    const rows = $('tr');\n\n    const seasonString = $($('select option')[2]).text();\n\n    const entries = [];\n\n    rows.each( (index, row) => {\n      const tds = $('td', '', row);\n\n      const texts = tds.map( (index, td) => {\n\n        let elm = td;\n\n        if (td.children.length > 0 && td.children[0].name === 'b') {\n          elm = td.children[0];\n        }\n\n        const a = $('a', '', elm);\n        const arr = [];\n\n        if (!isNil(a)) {\n          arr.push(a.attr('href'));\n        }\n\n        if (elm.children.length > 1) {\n          arr.push($(elm.children[0]).text());\n          arr.push($(elm.children[2]).text());\n        }\n        else {\n          arr.push($(td).text());\n        }\n\n        return arr;\n      }).get();\n\n      entries.push(texts);\n    }).get();\n\n    const tournaments = entries.filter( (entry) => {\n      if (entry.length < 10) {\n        return false;\n      }\n\n      if (entry[1] === 'DATE') {\n        return false;\n      }\n\n      return true;\n    }).map( (tourney) => {\n\n      const date = this.sanitizeDate(seasonString, tourney[1]);\n      const year = season.getSeason(moment(date.start, 'MM/DD/YYYY'));\n\n      if (tourney.length === 10 || tourney.length === 11) {\n\n        const t = {\n          date: date,\n          year,\n          espnUrl: tourney[2],\n          title: tourney[3],\n          course: tourney[4],\n          winner: tourney[6],\n          score: tourney[8],\n          purse: tourney[9]\n        };\n\n        if (tourney.length === 11) {\n          t.winner = tourney[8];\n          t.purse = tourney[10];\n          t.score = ''\n        }\n\n        return t;\n      }\n\n      return {\n        espnUrl: null,\n        year,\n        date: date,\n        title: tourney[4],\n        course: tourney[5],\n        lastWinner: tourney[9],\n        purse: tourney[11]\n      };\n    });\n\n    return tournaments;\n  }\n\n  sanitizeDate(seasonText, dateString) {\n    const years = seasonText.split('-');\n    const startYear = parseInt(years[0]);\n    let endYear = parseInt(years[1]);\n\n    if (endYear < 2000) {\n      endYear = endYear + 2000;\n    }\n\n    const days = dateString.split('-');\n\n    const start = this.parseDate(days[0].trim(), startYear, endYear).format('MM/DD/YYYY');\n    const end = this.parseDate(days[1].trim(), startYear, endYear).format('MM/DD/YYYY');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  parseDate(dateString, startYear, endYear) {\n    const mDate = moment(dateString, 'MMM DD');\n\n    // if it's between october and december its last year\n    if (mDate.month() >= 9 && mDate.month() < 12) {\n      mDate.year(startYear);\n    }\n    else {\n      mDate.year(endYear);\n    }\n\n    return mDate;\n  }\n\n  /**\n  This is where we look for the results of everything\n  **/\n  scrapeScheduleResults(resultsPage) {\n    const $ = cheerio.load(resultsPage);\n    const rows = $('.player-overview');\n    const results = [];\n\n    rows.each( (index, row) => {\n      results.push(this.parseResultRow($, row));\n    });\n\n    return results;\n  }\n\n  parseResultRow($, row) {\n    const name = $('.full-name', '', row).text();\n    const positionStr = $('.position', '', row).text();\n    const totalScore = $('.totalScore', '', row).text();\n    let officialAmountStr = $('.officialAmount', '', row).text();\n    const cupPoints = $('.cupPoints', '', row).text();\n    const round1 = $('.round1', '', row).text();\n    const round2 = $('.round2', '', row).text();\n    const round3 = $('.round3', '', row).text();\n    const round4 = $('.round4', '', row).text();\n    const relativeScore = $('.relativeScore', '', row).text();\n\n    // const name = row('.full-name').text();\n    // const positionStr = row('.position').text();\n    // const totalScore = row('.totalScore').text();\n    // let officialAmountStr = row('.officialAmount').text();\n    // const cupPoints = row('.cupPoints').text();\n    // const round1 = row('.round1').text();\n    // const round2 = row('.round2').text();\n    // const round3 = row('.round3').text();\n    // const round4 = row('.round4').text();\n    // const relativeScore = row('.relativeScore').text();\n\n\n    const nameArray = name.split(' ');\n    const lastName = nameArray.pop();\n    const firstName = nameArray.join(' ');\n    const position = {\n      tied: positionStr.startsWith('T'),\n      pos: (positionStr.startsWith('T')) ? parseInt(positionStr.substr(1)) : positionStr\n    };\n    const rounds = [];\n\n    (!isNil(round1) && round1.trim().length !== 0) ? rounds.push(parseInt(round1)) : null;\n    (!isNil(round2) && round2.trim().length !== 0) ? rounds.push(parseInt(round2)) : null;\n    (!isNil(round3) && round3.trim().length !== 0) ? rounds.push(parseInt(round3)) : null;\n    (!isNil(round4) && round4.trim().length !== 0) ? rounds.push(parseInt(round4)) : null;\n\n    officialAmountStr = officialAmountStr.replace(/,/g, '');\n    officialAmountStr = officialAmountStr.replace(/\\$/g, '');\n    const officialAmount = parseFloat(officialAmountStr);\n\n    return {\n      firstName,\n      lastName,\n      key: `${firstName.toLowerCase().replace(/[\\. ,:-]+/g, '')}+${lastName.toLowerCase().replace(/[\\. ,:-]+/g, '')}`,\n      totalScore: parseInt(totalScore),\n      cupPoints: parseInt(cupPoints),\n      relativeScore: parseInt(relativeScore),\n      rounds,\n      position,\n      officialAmount\n    };\n  }\n}\n\nmodule.exports = {\n  EspnUpdater\n};\n"]}