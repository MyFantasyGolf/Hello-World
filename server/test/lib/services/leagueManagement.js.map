{"version":3,"sources":["../../../src/services/leagueManagement.js"],"names":["isNil","require","leagueApi","draftApi","getMyLeagues","request","response","userId","session","getLeaguesForUser","leagues","send","getMyInvitations","getLeagueInvitations","invites","acceptInvitation","leagueId","params","teamName","declineInvitation","getLeague","league","createLeague","body","name","commissioner","status","saveLeague","getAvailablePlayers","players","getDraft","draft","getDraftList","teamId","updateDraftList","newList","draftList","startDraft","draftOptions","getDraftStatus","draftStatus","makeDraftPick","round","pick","selection","makePick","parseInt","module","exports"],"mappings":"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","file":"leagueManagement.js","sourcesContent":["const isNil = require('lodash/isNil');\nconst leagueApi = require('../db/leagueApi');\nconst draftApi = require('../db/draftApi');\n\nconst getMyLeagues = async (request, response) => {\n\n  const userId = request.session.userId;\n\n  const leagues = await leagueApi.getLeaguesForUser(userId);\n\n  response.send({leagues: leagues});\n};\n\nconst getMyInvitations = async (request, response) => {\n  const userId = request.session.userId;\n\n  const invites = await leagueApi.getLeagueInvitations(userId);\n  response.send({leagues: invites});\n};\n\nconst acceptInvitation = async (request, response) => {\n  const userId = request.session.userId;\n  const leagueId = request.params.leagueId;\n  const teamName = request.params.teamName;\n\n  await leagueApi.acceptInvitation(userId, leagueId, teamName)\n  response.send({'status': 'success'});\n};\n\nconst declineInvitation = async (request, response) => {\n  const userId = request.session.userId;\n  const leagueId = request.params.leagueId;\n\n  await leagueApi.declineInvitation(userId, leagueId)\n  response.send({'status': 'success'});\n};\n\nconst getLeague = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  const league = await leagueApi.getLeague(leagueId);\n\n  response.send({league});\n};\n\nconst createLeague = async (request, response) => {\n  const league = request.body;\n\n  if (isNil(league.name) ||\n    isNil(league.commissioner)) {\n    response.status(500).send('A league name and commissioner are required.');\n    return;\n  }\n\n  await leagueApi.saveLeague(league);\n  response.send({status: 'success'});\n};\n\nconst getAvailablePlayers = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('Invalid league ID.');\n    return;\n  }\n\n  const players = await leagueApi.getAvailablePlayers(leagueId);\n  response.send({players: players});\n};\n\nconst getDraft = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('League ID required');\n    return;\n  }\n\n  const draft = await draftApi.getDraft(leagueId);\n  response.send(draft);\n};\n\nconst getDraftList = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const teamId = request.session.userId;\n\n  if (isNil(leagueId) || isNil(teamId) || leagueId === 'undefined') {\n    response.status(500).send('Insufficient information provided.');\n    return;\n  }\n\n  const players = await draftApi.getDraftList(leagueId, teamId);\n  response.send({players: players});\n};\n\nconst updateDraftList = async (request, response) => {\n  const newList = request.body.draftList;\n  const leagueId = request.params.leagueId;\n  const userId = request.session.userId;\n\n  if (isNil(userId) || isNil(leagueId)) {\n    response.send(500).send('Insufficient information provided.');\n    return;\n  }\n\n  await draftApi.updateDraftList(leagueId, userId, newList);\n  response.send({'status': 'Success'});\n};\n\nconst startDraft = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const draftOptions = request.body.draftOptions;\n\n  if (isNil(draftOptions) || isNil(leagueId)) {\n    response.status(500).send('Not enough information to start draft');\n    return;\n  }\n\n  await draftApi.startDraft(leagueId, draftOptions);\n  response.send({'status': 'Success'});\n};\n\nconst getDraftStatus = async (request, response) => {\n  const leagueId = request.params.leagueId;\n\n  if (isNil(leagueId)) {\n    response.status(500).send('Not a valid league ID');\n    return;\n  }\n\n  const status = await draftApi.draftStatus(leagueId);\n  response.send(status);\n  return;\n};\n\nconst makeDraftPick = async (request, response) => {\n  const leagueId = request.params.leagueId;\n  const round = request.params.round;\n  const pick = request.params.pick;\n  const selection = request.body;\n\n  if (isNil(leagueId) || isNil(round) || isNil(pick) || isNil(selection)) {\n    response.status(500).send('Not enough information to make a valid pick.');\n    return;\n  }\n\n  await draftApi.makePick(leagueId,\n    parseInt(round) - 1,\n    parseInt(pick) - 1,\n    selection);\n  response.send({ 'status': 'success'});\n}\n\nmodule.exports = {\n  getMyLeagues,\n  getAvailablePlayers,\n  getLeague,\n  createLeague,\n  getDraftList,\n  updateDraftList,\n  startDraft,\n  getDraft,\n  getDraftStatus,\n  makeDraftPick,\n  getMyInvitations,\n  acceptInvitation,\n  declineInvitation\n};\n"]}