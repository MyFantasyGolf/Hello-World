{"version":3,"sources":["../../../src/services/userManagement.js"],"names":["isNil","require","userMgmt","bcrypt","registerUser","request","response","user","body","email","password","status","send","login","getUser","compare","success","session","userId","_id","module","exports"],"mappings":";;;;AAAA,IAAMA,QAAQC,QAAQ,cAAR,CAAd;AACA,IAAMC,WAAWD,QAAQ,eAAR,CAAjB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;;AAEA,IAAMG;AAAA,qEAAe,iBAAOC,OAAP,EAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,gBADa,GACNF,QAAQG,IADF;;AAAA,kBAIjBR,MAAMO,KAAKE,KAAX,KACAT,MAAMO,KAAKG,QAAX,CALiB;AAAA;AAAA;AAAA;;AAOjBJ,qBAASK,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,uCAA1B;AAPiB;;AAAA;AAAA;AAAA,mBAYbV,SAASE,YAAT,CAAsBG,IAAtB,CAZa;;AAAA;AAanBD,qBAASM,IAAT;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMC;AAAA,sEAAQ,kBAAOR,OAAP,EAAgBC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACNO,iBADM,GACER,QAAQG,IADV;;AAAA,kBAIVR,MAAMa,MAAMJ,KAAZ,KACAT,MAAMa,MAAMH,QAAZ,CALU;AAAA;AAAA;AAAA;;AAOVJ,qBAASK,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,eAA1B;AAPU;;AAAA;AAAA;AAAA,mBAWOV,SAASY,OAAT,CAAiBD,MAAMJ,KAAvB,CAXP;;AAAA;AAWNF,gBAXM;AAAA;AAAA,mBAaUJ,OAAOY,OAAP,CAAeF,MAAMH,QAArB,EAA+BH,KAAKG,QAApC,CAbV;;AAAA;AAaNM,mBAbM;;;AAeZ,gBAAIA,YAAY,IAAhB,EAAsB;AACpBV,uBAASK,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,eAA1B;AACD;;AAEDP,oBAAQY,OAAR,CAAgBC,MAAhB,GAAyBX,KAAKY,GAA9B;AACAb,qBAASM,IAAT;;AApBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuBAQ,OAAOC,OAAP,GAAiB;AACfjB,4BADe;AAEfS;AAFe,CAAjB","file":"userManagement.js","sourcesContent":["const isNil = require('lodash/isNil');\nconst userMgmt = require('../db/userApi');\nconst bcrypt = require('bcrypt');\n\nconst registerUser = async (request, response) => {\n  const user = request.body;\n\n  if (\n    isNil(user.email) ||\n    isNil(user.password)\n  ) {\n    response.status(500).send('Insufficient information to register.');\n    return;\n  }\n\n  // really register\n  await userMgmt.registerUser(user);\n  response.send();\n};\n\nconst login = async (request, response) => {\n  const login = request.body;\n\n  if (\n    isNil(login.email) ||\n    isNil(login.password)\n  ) {\n    response.status(401).send('Login failed.');\n    return;\n  }\n\n  const user = await userMgmt.getUser(login.email);\n\n  const success = await bcrypt.compare(login.password, user.password);\n\n  if (success !== true) {\n    response.status(401).send('Login failed.');\n  }\n\n  request.session.userId = user._id;\n  response.send();\n};\n\nmodule.exports = {\n  registerUser,\n  login\n};\n"]}