{"version":3,"sources":["../../../src/services/userManagement.js"],"names":["isNil","require","userMgmt","bcrypt","registerUser","request","response","user","body","email","password","name","status","send","login","getUser","state","compare","success","session","userId","_id","toString","save","logout","destroy","params","getUserById","getUsers","users","module","exports"],"mappings":"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","file":"userManagement.js","sourcesContent":["const isNil = require('lodash/isNil');\nconst userMgmt = require('../db/userApi');\nconst bcrypt = require('bcrypt');\n\n\nconst registerUser = async (request, response) => {\n  const user = request.body;\n\n  if (\n    isNil(user.email) ||\n    isNil(user.password) ||\n    isNil(user.name)\n  ) {\n    response.status(500).send('Insufficient information to register.');\n    return;\n  }\n\n  // really register\n  await userMgmt.registerUser(user);\n  response.send();\n};\n\nconst login = async (request, response) => {\n  const login = request.body;\n\n  if (\n    isNil(login) ||\n    isNil(login.email) ||\n    isNil(login.password)\n  ) {\n    response.status(401).send('Login failed');\n    return;\n  }\n\n  const user = await userMgmt.getUser(login.email);\n\n  if (isNil(user)) {\n    response.status(401).send('Login failed');\n    return;\n  }\n\n  if (user.state !== 'REGISTERED') {\n    response.status(401).send('User not registered');\n    return;\n  }\n\n  const success = await bcrypt.compare(login.password, user.password);\n\n  if (success !== true) {\n    response.status(401).send('Login failed');\n    return;\n  }\n\n  request.session.userId = user._id.toString();\n  request.session.save();\n  response.send(user);\n  return;\n};\n\nconst logout = async (request, response) => {\n  request.session.userId = null;\n  request.session.destroy();\n  response.send();\n  return;\n};\n\nconst getUser = async (request, response) => {\n  let userId = request.params.userId;\n\n  if (isNil(userId)) {\n    userId = request.session.userId;\n  }\n\n  if (isNil(userId)) {\n    response.status(500).send('ID does not exist');\n    return;\n  }\n\n  const user = await userMgmt.getUserById(userId);\n  response.send(user);\n  return;\n};\n\nconst getUsers = async (request, response) => {\n  const users = await userMgmt.getUsers();\n  response.send(users);\n  return;\n};\n\nmodule.exports = {\n  registerUser,\n  login,\n  logout,\n  getUser,\n  getUsers\n};\n"]}