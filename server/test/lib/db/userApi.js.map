{"version":3,"sources":["../../../src/db/userApi.js"],"names":["conn","require","bcrypt","registerUser","user","db","coll","collection","hash","password","ensureIndex","unique","insertOne","console","log","getUser","email","findOne","module","exports"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,cAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;AAEA,IAAME;AAAA,qEAAe,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFJ,KAAKK,EADH;;AAAA;AACbA,cADa;AAEbC,gBAFa,GAEND,GAAGE,UAAH,CAAc,OAAd,CAFM;AAAA;AAAA;AAAA,mBAKKL,OAAOM,IAAP,CAAYJ,KAAKK,QAAjB,EAA2B,EAA3B,CALL;;AAAA;AAKjBL,iBAAKK,QALY;AAAA;AAAA,mBAMXH,KAAKI,WAAL,CAAiB,OAAjB,EAA0B,EAAEC,QAAQ,IAAV,EAA1B,CANW;;AAAA;AAAA;AAAA,mBAOXL,KAAKM,SAAL,CAAe,EAAE,GAAGR,IAAL,EAAf,CAPW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUjBS,oBAAQC,GAAR,CAAY,qBAAZ;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAcA,IAAMC;AAAA,sEAAU,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGhB,KAAKK,EADR;;AAAA;AACRA,cADQ;AAERC,gBAFQ,GAEDD,GAAGE,UAAH,CAAc,OAAd,CAFC;AAAA;AAAA;AAAA,mBAKOD,KAAKW,OAAL,CAAa,EAACD,OAAOA,KAAR,EAAb,CALP;;AAAA;AAKNZ,gBALM;AAAA,8CAMLA,IANK;;AAAA;AAAA;AAAA;;AASZS,oBAAQC,GAAR,CAAY,SAAZ;;AATY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaAI,OAAOC,OAAP,GAAiB;AACfhB,4BADe;AAEfY;AAFe,CAAjB","file":"userApi.js","sourcesContent":["const conn = require('./connection');\nconst bcrypt = require('bcrypt');\n\nconst registerUser = async (user) => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    user.password = await bcrypt.hash(user.password, 10);\n    await coll.ensureIndex('email', { unique: true });\n    await coll.insertOne({ ...user });\n  }\n  catch(err) {\n    console.log(\"User already exists\");\n  }\n};\n\nconst getUser = async (email) => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    const user = await coll.findOne({email: email});\n    return user;\n  }\n  catch(err) {\n    console.log(\"No user\");\n  }\n};\n\nmodule.exports = {\n  registerUser,\n  getUser\n};\n"]}