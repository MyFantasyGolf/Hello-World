{"version":3,"sources":["../../../src/db/userApi.js"],"names":["conn","require","ObjectId","bcrypt","isNil","getUser","email","db","coll","collection","findOne","user","console","log","registerUser","registered","state","password","hash","existingUser","ensureIndex","unique","insertOne","findOneAndUpdate","$set","name","getUserById","id","_id","getUsers","find","toArray","users","module","exports"],"mappings":"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","file":"userApi.js","sourcesContent":["const conn = require('./connection');\nconst ObjectId = require('mongodb').ObjectId;\nconst bcrypt = require('bcrypt');\n\nconst isNil = require('lodash/isNil');\n\nconst getUser = async (email) => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    const user = await coll.findOne({'email': email});\n    return user;\n  }\n  catch(err) {\n    console.log(\"No user\");\n  }\n};\n\nconst registerUser = async (user, registered = true) => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    if (registered === true) {\n      user.state = 'REGISTERED';\n    }\n    else {\n      user.state = 'UNREGISTERED';\n    }\n\n    if (!isNil(user.password)) {\n      user.password = await bcrypt.hash(user.password, 10);\n    }\n\n    const existingUser = await getUser(user.email);\n\n    if (isNil(existingUser)) {\n      await coll.ensureIndex('email', { unique: true });\n      await coll.insertOne({ ...user });\n    }\n    else {\n      await coll.findOneAndUpdate({ email: user.email },\n        {$set: {\n          'state': user.state,\n          'password': user.password,\n          'name': user.name\n        }});\n    }\n  }\n  catch(err) {\n    console.log(\"User already exists\");\n  }\n};\n\nconst getUserById = async (id) => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    const user = await coll.findOne({_id: ObjectId(id)});\n    return user;\n  }\n  catch(err) {\n    console.log(\"No user\");\n  }\n};\n\nconst getUsers = async () => {\n  const db = await conn.db;\n  const coll = db.collection('users');\n\n  try {\n    const users = await coll.find({}).toArray();\n    return users;\n  }\n  catch(err) {\n    console.log(\"No users\");\n  }\n};\n\nmodule.exports = {\n  registerUser,\n  getUser,\n  getUserById,\n  getUsers\n};\n"]}