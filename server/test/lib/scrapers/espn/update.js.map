{"version":3,"sources":["../../../../src/scrapers/espn/update.js"],"names":["cheerio","require","fs","path","request","moment","sleep","isNil","season","resultsApi","EspnUpdater","htmlFile","updateSchedules","schedules","webSchedules","getSchedule","getSchedules","year","schedulesToFix","filter","ws","found","find","ss","key","title","toLowerCase","replace","complete","forEach","schedule","saveTourSchedule","file","data","readFileSync","toString","getSeason","results","scrapeScheduleResults","saveResults","sleeper","parseInt","Math","random","console","log","html","scrapeSchdule","get","err","response","body","$","load","rows","seasonString","text","entries","each","index","row","tds","texts","map","td","elm","children","length","name","a","arr","push","attr","tournaments","entry","tourney","date","sanitizeDate","start","t","espnUrl","course","winner","score","purse","lastWinner","seasonText","dateString","years","split","startYear","endYear","days","parseDate","trim","format","end","mDate","month","resultsPage","parseResultRow","positionStr","totalScore","officialAmountStr","cupPoints","round1","round2","round3","round4","relativeScore","nameArray","lastName","pop","firstName","join","position","tied","startsWith","pos","substr","rounds","officialAmount","parseFloat","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,QAAQL,QAAQ,OAAR,CAAd;AACA,IAAMM,QAAQN,QAAQ,cAAR,CAAd;;AAEA,IAAMO,SAASP,QAAQ,oBAAR,CAAf;AACA,IAAMQ,aAAaR,QAAQ,qBAAR,CAAnB;;IAEMS,W;;;;;;;;0FAESC,Q;;;;;;;uBACa,KAAKC,eAAL,CAAqBD,QAArB,C;;;AAAlBE,yB;;;;;;;;;;;;;;;;;;;4FAGcF,Q;;;;;;AACdG,4B,GAAe,KAAKC,WAAL,CAAiBJ,QAAjB,C;;uBAEGF,WAAWO,YAAX,CAAwBF,aAAa,CAAb,EAAgBG,IAAxC,C;;;AAAlBJ,yB;AACAK,8B,GAAiBJ,aAAaK,MAAb,CAAqB,UAACC,EAAD,EAAQ;AAClD,sBAAIb,MAAMM,SAAN,CAAJ,EAAsB;AACpB,2BAAO,IAAP;AACD;;AAED,sBAAMQ,QAAQR,UAAUS,IAAV,CAAgB,UAACC,EAAD,EAAQ;AACpC,wBAAIA,GAAGC,GAAH,KAAWJ,GAAGK,KAAH,CAASC,WAAT,GAAuBC,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAAf,EAAyD;AACvD,6BAAOJ,GAAGK,QAAV;AACD;;AAED,2BAAO,KAAP;AACD,mBANa,CAAd;;AAQA,yBAAO,IAAP;AACD,iBAdsB,C;;AAgBvB;;AACAV,+BAAeW,OAAf,CAAwB,UAACC,QAAD,EAAc;AACpCA,2BAASF,QAAT,GAAoB,KAApB;AACAnB,6BAAWsB,gBAAX,CAA4BD,QAA5B;AACD,iBAHD;;kDAKOZ,c;;;;;;;;;;;;;;;;;AAGT;;;;;;;;4FAIoBc,I;;;;;;;;AACdC,oB;;;AAEJ,oBAAI,CAAC1B,MAAMyB,IAAN,CAAL,EAAkB;AAChBC,yBAAO/B,GAAGgC,YAAH,CAAgBF,IAAhB,EAAsBG,QAAtB,EAAP;AACD;;AAEKlB,oB,GAAOT,OAAO4B,SAAP,E;;uBAEW3B,WAAWO,YAAX,CAAwBC,IAAxB,C;;;AAAlBJ,yB;;;AAENA,0BAAUgB,OAAV;AAAA,sFAAmB,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEZvB,MAAM0B,IAAN,CAFY;AAAA;AAAA;AAAA;;AAGTI,mCAHS,GAGC,MAAKC,qBAAL,CAA2BL,IAA3B,CAHD;AAAA;AAAA,mCAITxB,WAAW8B,WAAX,CAAuBT,QAAvB,EAAiCO,OAAjC,CAJS;;AAAA;AAOXG,mCAPW,GAODC,SAAUC,KAAKC,MAAL,KAAgB,CAAjB,GAAsB,CAA/B,CAPC;;AAQjBC,oCAAQC,GAAR,mBAA4BL,OAA5B;AACAlC,kCAAMA,KAAN,CAAYkC,OAAZ;;AATiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAnB;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;gCAaU7B,Q,EAAU;AAAA;;AACpB,UAAImC,aAAJ;;AAEA,UAAI,CAACvC,MAAMI,QAAN,CAAL,EAAsB;AACpB,YAAMsB,OAAO/B,GAAGgC,YAAH,CAAgBvB,QAAhB,EAA0BwB,QAA1B,EAAb;AACA,eAAO,KAAKY,aAAL,CAAmBd,IAAnB,CAAP;AACD,OAHD,MAIK;AACH7B,gBAAQ4C,GAAR,CAAY,mCAAZ,EAAiD,UAACC,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACxE,iBAAO,OAAKJ,aAAL,CAAmBI,IAAnB,CAAP;AACD,SAFD;AAGD;AACF;;;uCAEkBrB,Q,EAAU;AAC3B;AACA;AACA;AACD;;;kCAEagB,I,EAAM;AAAA;;AAClB,UAAMM,IAAIpD,QAAQqD,IAAR,CAAaP,IAAb,CAAV;AACA,UAAMQ,OAAOF,EAAE,IAAF,CAAb;;AAEA,UAAMG,eAAeH,EAAEA,EAAE,eAAF,EAAmB,CAAnB,CAAF,EAAyBI,IAAzB,EAArB;;AAEA,UAAMC,UAAU,EAAhB;;AAEAH,WAAKI,IAAL,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzB,YAAMC,MAAMT,EAAE,IAAF,EAAQ,EAAR,EAAYQ,GAAZ,CAAZ;;AAEA,YAAME,QAAQD,IAAIE,GAAJ,CAAS,UAACJ,KAAD,EAAQK,EAAR,EAAe;;AAEpC,cAAIC,MAAMD,EAAV;;AAEA,cAAIA,GAAGE,QAAH,CAAYC,MAAZ,GAAqB,CAArB,IAA0BH,GAAGE,QAAH,CAAY,CAAZ,EAAeE,IAAf,KAAwB,GAAtD,EAA2D;AACzDH,kBAAMD,GAAGE,QAAH,CAAY,CAAZ,CAAN;AACD;;AAED,cAAMG,IAAIjB,EAAE,GAAF,EAAO,EAAP,EAAWa,GAAX,CAAV;AACA,cAAMK,MAAM,EAAZ;;AAEA,cAAI,CAAC/D,MAAM8D,CAAN,CAAL,EAAe;AACbC,gBAAIC,IAAJ,CAASF,EAAEG,IAAF,CAAO,MAAP,CAAT;AACD;;AAED,cAAIP,IAAIC,QAAJ,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3BG,gBAAIC,IAAJ,CAASnB,EAAEa,IAAIC,QAAJ,CAAa,CAAb,CAAF,EAAmBV,IAAnB,EAAT;AACAc,gBAAIC,IAAJ,CAASnB,EAAEa,IAAIC,QAAJ,CAAa,CAAb,CAAF,EAAmBV,IAAnB,EAAT;AACD,WAHD,MAIK;AACHc,gBAAIC,IAAJ,CAASnB,EAAEY,EAAF,EAAMR,IAAN,EAAT;AACD;;AAED,iBAAOc,GAAP;AACD,SAxBa,EAwBXtB,GAxBW,EAAd;;AA0BAS,gBAAQc,IAAR,CAAaT,KAAb;AACD,OA9BD,EA8BGd,GA9BH;;AAgCA,UAAMyB,cAAchB,QAAQtC,MAAR,CAAgB,UAACuD,KAAD,EAAW;AAC7C,YAAIA,MAAMP,MAAN,GAAe,EAAnB,EAAuB;AACrB,iBAAO,KAAP;AACD;;AAED,YAAIO,MAAM,CAAN,MAAa,MAAjB,EAAyB;AACvB,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD,OAVmB,EAUjBX,GAViB,CAUZ,UAACY,OAAD,EAAa;;AAEnB,YAAMC,OAAO,OAAKC,YAAL,CAAkBtB,YAAlB,EAAgCoB,QAAQ,CAAR,CAAhC,CAAb;AACA,YAAM1D,OAAOT,OAAO4B,SAAP,CAAiB/B,OAAOuE,KAAKE,KAAZ,EAAmB,YAAnB,CAAjB,CAAb;;AAEA,YAAIH,QAAQR,MAAR,KAAmB,EAAnB,IAAyBQ,QAAQR,MAAR,KAAmB,EAAhD,EAAoD;;AAElD,cAAMY,IAAI;AACRH,kBAAMA,IADE;AAER3D,sBAFQ;AAGR+D,qBAASL,QAAQ,CAAR,CAHD;AAIRlD,mBAAOkD,QAAQ,CAAR,CAJC;AAKRM,oBAAQN,QAAQ,CAAR,CALA;AAMRO,oBAAQP,QAAQ,CAAR,CANA;AAORQ,mBAAOR,QAAQ,CAAR,CAPC;AAQRS,mBAAOT,QAAQ,CAAR;AARC,WAAV;;AAWA,cAAIA,QAAQR,MAAR,KAAmB,EAAvB,EAA2B;AACzBY,cAAEG,MAAF,GAAWP,QAAQ,CAAR,CAAX;AACAI,cAAEK,KAAF,GAAUT,QAAQ,EAAR,CAAV;AACAI,cAAEI,KAAF,GAAU,EAAV;AACD;;AAED,iBAAOJ,CAAP;AACD;;AAED,eAAO;AACLC,mBAAS,IADJ;AAEL/D,oBAFK;AAGL2D,gBAAMA,IAHD;AAILnD,iBAAOkD,QAAQ,CAAR,CAJF;AAKLM,kBAAQN,QAAQ,CAAR,CALH;AAMLU,sBAAYV,QAAQ,CAAR,CANP;AAOLS,iBAAOT,QAAQ,EAAR;AAPF,SAAP;AASD,OA9CmB,CAApB;;AAgDA,aAAOF,WAAP;AACD;;;iCAEYa,U,EAAYC,U,EAAY;AACnC,UAAMC,QAAQF,WAAWG,KAAX,CAAiB,GAAjB,CAAd;AACA,UAAMC,YAAYjD,SAAS+C,MAAM,CAAN,CAAT,CAAlB;AACA,UAAIG,UAAUlD,SAAS+C,MAAM,CAAN,CAAT,CAAd;;AAEA,UAAIG,UAAU,IAAd,EAAoB;AAClBA,kBAAUA,UAAU,IAApB;AACD;;AAED,UAAMC,OAAOL,WAAWE,KAAX,CAAiB,GAAjB,CAAb;;AAEA,UAAMX,QAAQ,KAAKe,SAAL,CAAeD,KAAK,CAAL,EAAQE,IAAR,EAAf,EAA+BJ,SAA/B,EAA0CC,OAA1C,EAAmDI,MAAnD,CAA0D,YAA1D,CAAd;AACA,UAAMC,MAAM,KAAKH,SAAL,CAAeD,KAAK,CAAL,EAAQE,IAAR,EAAf,EAA+BJ,SAA/B,EAA0CC,OAA1C,EAAmDI,MAAnD,CAA0D,YAA1D,CAAZ;;AAEA,aAAO;AACLjB,oBADK;AAELkB;AAFK,OAAP;AAID;;;8BAEST,U,EAAYG,S,EAAWC,O,EAAS;AACxC,UAAMM,QAAQ5F,OAAOkF,UAAP,EAAmB,QAAnB,CAAd;;AAEA;AACA,UAAIU,MAAMC,KAAN,MAAiB,CAAjB,IAAsBD,MAAMC,KAAN,KAAgB,EAA1C,EAA8C;AAC5CD,cAAMhF,IAAN,CAAWyE,SAAX;AACD,OAFD,MAGK;AACHO,cAAMhF,IAAN,CAAW0E,OAAX;AACD;;AAED,aAAOM,KAAP;AACD;;AAED;;;;;;0CAGsBE,W,EAAa;AAAA;;AACjC,UAAM/C,IAAIpD,QAAQqD,IAAR,CAAa8C,WAAb,CAAV;AACA,UAAM7C,OAAOF,EAAE,kBAAF,CAAb;AACA,UAAMf,UAAU,EAAhB;;AAEAiB,WAAKI,IAAL,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzBvB,gBAAQkC,IAAR,CAAa,OAAK6B,cAAL,CAAoBhD,CAApB,EAAuBQ,GAAvB,CAAb;AACD,OAFD;;AAIA,aAAOvB,OAAP;AACD;;;mCAEce,C,EAAGQ,G,EAAK;AACrB,UAAMQ,OAAOhB,EAAE,YAAF,EAAgB,EAAhB,EAAoBQ,GAApB,EAAyBJ,IAAzB,EAAb;AACA,UAAM6C,cAAcjD,EAAE,WAAF,EAAe,EAAf,EAAmBQ,GAAnB,EAAwBJ,IAAxB,EAApB;AACA,UAAM8C,aAAalD,EAAE,aAAF,EAAiB,EAAjB,EAAqBQ,GAArB,EAA0BJ,IAA1B,EAAnB;AACA,UAAI+C,oBAAoBnD,EAAE,iBAAF,EAAqB,EAArB,EAAyBQ,GAAzB,EAA8BJ,IAA9B,EAAxB;AACA,UAAMgD,YAAYpD,EAAE,YAAF,EAAgB,EAAhB,EAAoBQ,GAApB,EAAyBJ,IAAzB,EAAlB;AACA,UAAMiD,SAASrD,EAAE,SAAF,EAAa,EAAb,EAAiBQ,GAAjB,EAAsBJ,IAAtB,EAAf;AACA,UAAMkD,SAAStD,EAAE,SAAF,EAAa,EAAb,EAAiBQ,GAAjB,EAAsBJ,IAAtB,EAAf;AACA,UAAMmD,SAASvD,EAAE,SAAF,EAAa,EAAb,EAAiBQ,GAAjB,EAAsBJ,IAAtB,EAAf;AACA,UAAMoD,SAASxD,EAAE,SAAF,EAAa,EAAb,EAAiBQ,GAAjB,EAAsBJ,IAAtB,EAAf;AACA,UAAMqD,gBAAgBzD,EAAE,gBAAF,EAAoB,EAApB,EAAwBQ,GAAxB,EAA6BJ,IAA7B,EAAtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAMsD,YAAY1C,KAAKqB,KAAL,CAAW,GAAX,CAAlB;AACA,UAAMsB,WAAWD,UAAUE,GAAV,EAAjB;AACA,UAAMC,YAAYH,UAAUI,IAAV,CAAe,GAAf,CAAlB;AACA,UAAMC,WAAW;AACfC,cAAMf,YAAYgB,UAAZ,CAAuB,GAAvB,CADS;AAEfC,aAAMjB,YAAYgB,UAAZ,CAAuB,GAAvB,CAAD,GAAgC5E,SAAS4D,YAAYkB,MAAZ,CAAmB,CAAnB,CAAT,CAAhC,GAAkElB;AAFxD,OAAjB;AAIA,UAAMmB,SAAS,EAAf;;AAEC,OAACjH,MAAMkG,MAAN,CAAD,IAAkBA,OAAOX,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAY9B,SAASgE,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAAClG,MAAMmG,MAAN,CAAD,IAAkBA,OAAOZ,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAY9B,SAASiE,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAACnG,MAAMoG,MAAN,CAAD,IAAkBA,OAAOb,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAY9B,SAASkE,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAACpG,MAAMqG,MAAN,CAAD,IAAkBA,OAAOd,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAY9B,SAASmE,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;;AAEAL,0BAAoBA,kBAAkB5E,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CAApB;AACA4E,0BAAoBA,kBAAkB5E,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAApB;AACA,UAAM8F,iBAAiBC,WAAWnB,iBAAX,CAAvB;;AAEA,aAAO;AACLU,4BADK;AAELF,0BAFK;AAGLvF,aAAQyF,UAAUvF,WAAV,GAAwBC,OAAxB,CAAgC,YAAhC,EAA8C,EAA9C,CAAR,SAA6DoF,SAASrF,WAAT,GAAuBC,OAAvB,CAA+B,YAA/B,EAA6C,EAA7C,CAHxD;AAIL2E,oBAAY7D,SAAS6D,UAAT,CAJP;AAKLE,mBAAW/D,SAAS+D,SAAT,CALN;AAMLK,uBAAepE,SAASoE,aAAT,CANV;AAOLW,sBAPK;AAQLL,0BARK;AASLM;AATK,OAAP;AAWD;;;;;;AAGHE,OAAOC,OAAP,GAAiB;AACflH;AADe,CAAjB","file":"update.js","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs');\nconst path = require('path');\nconst request = require('request');\nconst moment = require('moment');\nconst sleep = require('sleep');\nconst isNil = require('lodash/isNil');\n\nconst season = require('../../utils/season');\nconst resultsApi = require('../../db/resultsApi');\n\nclass EspnUpdater {\n\n  async update(htmlFile) {\n    const schedules = await this.updateSchedules(htmlFile);\n  }\n\n  async updateSchedules(htmlFile) {\n    const webSchedules = this.getSchedule(htmlFile);\n\n    const schedules = await resultsApi.getSchedules(webSchedules[0].year);\n    const schedulesToFix = webSchedules.filter( (ws) => {\n      if (isNil(schedules)) {\n        return true;\n      }\n\n      const found = schedules.find( (ss) => {\n        if (ss.key === ws.title.toLowerCase().replace(/ /g, '')) {\n          return ss.complete;\n        }\n\n        return false;\n      });\n\n      return true;\n    });\n\n    // save these new schedules\n    schedulesToFix.forEach( (schedule) => {\n      schedule.complete = false;\n      resultsApi.saveTourSchedule(schedule)\n    });\n\n    return schedulesToFix;\n  }\n\n  /**\n  Run through the schedules and try to fill in results for\n  tournaments that have them.\n  **/\n  async updateResults(file) {\n    let data;\n\n    if (!isNil(file)) {\n      data = fs.readFileSync(file).toString();\n    }\n\n    const year = season.getSeason();\n\n    const schedules = await resultsApi.getSchedules(year);\n\n    schedules.forEach( async (schedule) => {\n\n      if (!isNil(data)) {\n        const results = this.scrapeScheduleResults(data);\n        await resultsApi.saveResults(schedule, results);\n      }\n\n      const sleeper = parseInt((Math.random() * 3) + 1);\n      console.log(`Sleeping for ${sleeper} seconds.\\n`);\n      sleep.sleep(sleeper);\n    });\n  }\n\n  getSchedule(htmlFile) {\n    let html;\n\n    if (!isNil(htmlFile)) {\n      const data = fs.readFileSync(htmlFile).toString();\n      return this.scrapeSchdule(data);\n    }\n    else {\n      request.get('http://www.espn.com/golf/schedule', (err, response, body) => {\n        return this.scrapeSchdule(body);\n      });\n    }\n  }\n\n  getScheduleResults(schedule) {\n    // request.get(schedule.espnUrl, (err, response, body) => {\n    //   return this.scrapeScheduleResults(body);\n    // });\n  }\n\n  scrapeSchdule(html) {\n    const $ = cheerio.load(html);\n    const rows = $('tr');\n\n    const seasonString = $($('select option')[1]).text();\n\n    const entries = [];\n\n    rows.each( (index, row) => {\n      const tds = $('td', '', row);\n\n      const texts = tds.map( (index, td) => {\n\n        let elm = td;\n\n        if (td.children.length > 0 && td.children[0].name === 'b') {\n          elm = td.children[0];\n        }\n\n        const a = $('a', '', elm);\n        const arr = [];\n\n        if (!isNil(a)) {\n          arr.push(a.attr('href'));\n        }\n\n        if (elm.children.length > 1) {\n          arr.push($(elm.children[0]).text());\n          arr.push($(elm.children[2]).text());\n        }\n        else {\n          arr.push($(td).text());\n        }\n\n        return arr;\n      }).get();\n\n      entries.push(texts);\n    }).get();\n\n    const tournaments = entries.filter( (entry) => {\n      if (entry.length < 10) {\n        return false;\n      }\n\n      if (entry[1] === 'DATE') {\n        return false;\n      }\n\n      return true;\n    }).map( (tourney) => {\n\n      const date = this.sanitizeDate(seasonString, tourney[1]);\n      const year = season.getSeason(moment(date.start, 'MM/DD/YYYY'));\n\n      if (tourney.length === 10 || tourney.length === 11) {\n\n        const t = {\n          date: date,\n          year,\n          espnUrl: tourney[2],\n          title: tourney[3],\n          course: tourney[4],\n          winner: tourney[6],\n          score: tourney[8],\n          purse: tourney[9]\n        };\n\n        if (tourney.length === 11) {\n          t.winner = tourney[8];\n          t.purse = tourney[10];\n          t.score = ''\n        }\n\n        return t;\n      }\n\n      return {\n        espnUrl: null,\n        year,\n        date: date,\n        title: tourney[4],\n        course: tourney[5],\n        lastWinner: tourney[9],\n        purse: tourney[11]\n      };\n    });\n\n    return tournaments;\n  }\n\n  sanitizeDate(seasonText, dateString) {\n    const years = seasonText.split('-');\n    const startYear = parseInt(years[0]);\n    let endYear = parseInt(years[1]);\n\n    if (endYear < 2000) {\n      endYear = endYear + 2000;\n    }\n\n    const days = dateString.split('-');\n\n    const start = this.parseDate(days[0].trim(), startYear, endYear).format('MM/DD/YYYY');\n    const end = this.parseDate(days[1].trim(), startYear, endYear).format('MM/DD/YYYY');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  parseDate(dateString, startYear, endYear) {\n    const mDate = moment(dateString, 'MMM DD');\n\n    // if it's between october and december its last year\n    if (mDate.month() >= 9 && mDate.month() < 12) {\n      mDate.year(startYear);\n    }\n    else {\n      mDate.year(endYear);\n    }\n\n    return mDate;\n  }\n\n  /**\n  This is where we look for the results of everything\n  **/\n  scrapeScheduleResults(resultsPage) {\n    const $ = cheerio.load(resultsPage);\n    const rows = $('.player-overview');\n    const results = [];\n\n    rows.each( (index, row) => {\n      results.push(this.parseResultRow($, row));\n    });\n\n    return results;\n  }\n\n  parseResultRow($, row) {\n    const name = $('.full-name', '', row).text();\n    const positionStr = $('.position', '', row).text();\n    const totalScore = $('.totalScore', '', row).text();\n    let officialAmountStr = $('.officialAmount', '', row).text();\n    const cupPoints = $('.cupPoints', '', row).text();\n    const round1 = $('.round1', '', row).text();\n    const round2 = $('.round2', '', row).text();\n    const round3 = $('.round3', '', row).text();\n    const round4 = $('.round4', '', row).text();\n    const relativeScore = $('.relativeScore', '', row).text();\n\n    // const name = row('.full-name').text();\n    // const positionStr = row('.position').text();\n    // const totalScore = row('.totalScore').text();\n    // let officialAmountStr = row('.officialAmount').text();\n    // const cupPoints = row('.cupPoints').text();\n    // const round1 = row('.round1').text();\n    // const round2 = row('.round2').text();\n    // const round3 = row('.round3').text();\n    // const round4 = row('.round4').text();\n    // const relativeScore = row('.relativeScore').text();\n\n\n    const nameArray = name.split(' ');\n    const lastName = nameArray.pop();\n    const firstName = nameArray.join(' ');\n    const position = {\n      tied: positionStr.startsWith('T'),\n      pos: (positionStr.startsWith('T')) ? parseInt(positionStr.substr(1)) : positionStr\n    };\n    const rounds = [];\n\n    (!isNil(round1) && round1.trim().length !== 0) ? rounds.push(parseInt(round1)) : null;\n    (!isNil(round2) && round2.trim().length !== 0) ? rounds.push(parseInt(round2)) : null;\n    (!isNil(round3) && round3.trim().length !== 0) ? rounds.push(parseInt(round3)) : null;\n    (!isNil(round4) && round4.trim().length !== 0) ? rounds.push(parseInt(round4)) : null;\n\n    officialAmountStr = officialAmountStr.replace(/,/g, '');\n    officialAmountStr = officialAmountStr.replace(/\\$/g, '');\n    const officialAmount = parseFloat(officialAmountStr);\n\n    return {\n      firstName,\n      lastName,\n      key: `${firstName.toLowerCase().replace(/[\\. ,:-]+/g, '')}+${lastName.toLowerCase().replace(/[\\. ,:-]+/g, '')}`,\n      totalScore: parseInt(totalScore),\n      cupPoints: parseInt(cupPoints),\n      relativeScore: parseInt(relativeScore),\n      rounds,\n      position,\n      officialAmount\n    };\n  }\n}\n\nmodule.exports = {\n  EspnUpdater\n};\n"]}