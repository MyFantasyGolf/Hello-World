{"version":3,"sources":["../../../../src/scrapers/espn/update.js"],"names":["cheerio","require","fs","path","request","moment","isNil","resultsApi","EspnUpdater","htmlFile","Promise","resolve","reject","updateSchedules","then","schedules","updateScheduleDetails","promise","webSchedules","getSchedule","savedSchedules","getSchedules","err","schedulesToFix","filter","ws","found","find","ss","date","espnUrl","complete","saveTourSchedule","year","forEach","schedule","results","getScheduleResults","html","data","readFileSync","toString","scrapeSchdule","get","response","body","$","load","rows","season","text","entries","each","index","row","tds","texts","map","td","elm","children","length","name","a","arr","push","attr","tournaments","entry","tourney","sanitizeDate","t","title","course","winner","score","purse","lastWinner","seasonText","dateString","years","split","startYear","parseInt","endYear","days","start","parseDate","trim","format","end","mDate","month","resultsPage","parseResultRow","positionStr","totalScore","officialAmountStr","cupPoints","round1","round2","round3","round4","relativeScore","nameArray","lastName","pop","firstName","join","position","tied","startsWith","pos","substr","rounds","replace","officialAmount","parseFloat","module","exports"],"mappings":";;;;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,QAAQL,QAAQ,cAAR,CAAd;;AAEA,IAAMM,aAAaN,QAAQ,qBAAR,CAAnB;;IAEMO,W;;;;;;;2BAEGC,Q,EAAU;AAAA;;AACf,aAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,cAAKC,eAAL,CAAqBJ,QAArB,EAA+BK,IAA/B,CAAqC,UAACC,SAAD,EAAe;AAClD,gBAAKC,qBAAL,CAA2BD,SAA3B;AACAJ;AACD,SAHD;AAID,OALM,CAAP;AAMA;AACD;;;oCAEeF,Q,EAAU;AAAA;;AACxB,UAAMQ,UAAU,IAAIP,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChD,YAAMM,eAAe,OAAKC,WAAL,CAAiBV,QAAjB,CAArB;;AAEA,YAAMW,iBAAiBb,WAAWc,YAAX,GAA0BP,IAA1B,CAAgC,UAACQ,GAAD,EAAMP,SAAN,EAAoB;AACzE,cAAMQ,iBAAiBL,aAAaM,MAAb,CAAqB,UAACC,EAAD,EAAQ;AAClD,gBAAInB,MAAMS,SAAN,CAAJ,EAAsB;AACpB,qBAAO,IAAP;AACD;;AAED,gBAAMW,QAAQX,UAAUY,IAAV,CAAgB,UAACC,EAAD,EAAQ;AACpC,kBAAIA,GAAGC,IAAH,KAAYJ,GAAGI,IAAf,IAAuB,CAACvB,MAAMsB,GAAGE,OAAT,CAA5B,EAA+C;AAC7C,uBAAOF,GAAGG,QAAV;AACD;;AAED,qBAAO,KAAP;AACD,aANa,CAAd;AAOD,WAZsB,CAAvB;;AAcA;AACAxB,qBAAWyB,gBAAX,CAA4B,EAACC,MAAM,IAAP,EAA5B,EAA0CV,cAA1C;;AAEAZ,kBAAQY,cAAR;AACD,SAnBsB,CAAvB;AAoBD,OAvBe,CAAhB;;AAyBA,aAAON,OAAP;AACD;;;0CAEqBF,S,EAAW;AAAA;;AAC/BA,gBAAUmB,OAAV,CAAmB,UAACC,QAAD,EAAc;AAC/B,YAAMC,UAAU,OAAKC,kBAAL,CAAwBF,QAAxB,CAAhB;AACD,OAFD;AAGD;;;gCAEW1B,Q,EAAU;AAAA;;AAEpB,UAAI6B,aAAJ;;AAEA,UAAI,CAAChC,MAAMG,QAAN,CAAL,EAAsB;AACpB,YAAM8B,OAAOrC,GAAGsC,YAAH,CAAgB/B,QAAhB,EAA0BgC,QAA1B,EAAb;AACA,eAAO,KAAKC,aAAL,CAAmBH,IAAnB,CAAP;AACD,OAHD,MAIK;AACHnC,gBAAQuC,GAAR,CAAY,mCAAZ,EAAiD,UAACrB,GAAD,EAAMsB,QAAN,EAAgBC,IAAhB,EAAyB;AACxE,iBAAO,OAAKH,aAAL,CAAmBG,IAAnB,CAAP;AACD,SAFD;AAGD;AACF;;;uCAEkBV,Q,EAAU;AAC3B;AACA;AACA;AACD;;;kCAEaG,I,EAAM;AAAA;;AAClB,UAAMQ,IAAI9C,QAAQ+C,IAAR,CAAaT,IAAb,CAAV;AACA,UAAMU,OAAOF,EAAE,IAAF,CAAb;;AAEA,UAAMG,SAASH,EAAEA,EAAE,eAAF,EAAmB,CAAnB,CAAF,EAAyBI,IAAzB,EAAf;;AAEA,UAAMC,UAAU,EAAhB;;AAEAH,WAAKI,IAAL,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzB,YAAMC,MAAMT,EAAE,IAAF,EAAQ,EAAR,EAAYQ,GAAZ,CAAZ;;AAEA,YAAME,QAAQD,IAAIE,GAAJ,CAAS,UAACJ,KAAD,EAAQK,EAAR,EAAe;;AAEpC,cAAIC,MAAMD,EAAV;;AAEA,cAAIA,GAAGE,QAAH,CAAYC,MAAZ,GAAqB,CAArB,IAA0BH,GAAGE,QAAH,CAAY,CAAZ,EAAeE,IAAf,KAAwB,GAAtD,EAA2D;AACzDH,kBAAMD,GAAGE,QAAH,CAAY,CAAZ,CAAN;AACD;;AAED,cAAMG,IAAIjB,EAAE,GAAF,EAAO,EAAP,EAAWa,GAAX,CAAV;AACA,cAAMK,MAAM,EAAZ;;AAEA,cAAI,CAAC1D,MAAMyD,CAAN,CAAL,EAAe;AACbC,gBAAIC,IAAJ,CAASF,EAAEG,IAAF,CAAO,MAAP,CAAT;AACD;;AAED,cAAIP,IAAIC,QAAJ,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3BG,gBAAIC,IAAJ,CAASnB,EAAEa,IAAIC,QAAJ,CAAa,CAAb,CAAF,EAAmBV,IAAnB,EAAT;AACAc,gBAAIC,IAAJ,CAASnB,EAAEa,IAAIC,QAAJ,CAAa,CAAb,CAAF,EAAmBV,IAAnB,EAAT;AACD,WAHD,MAIK;AACHc,gBAAIC,IAAJ,CAASnB,EAAEY,EAAF,EAAMR,IAAN,EAAT;AACD;;AAED,iBAAOc,GAAP;AACD,SAxBa,EAwBXrB,GAxBW,EAAd;;AA0BAQ,gBAAQc,IAAR,CAAaT,KAAb;AACD,OA9BD,EA8BGb,GA9BH;;AAgCA,UAAMwB,cAAchB,QAAQ3B,MAAR,CAAgB,UAAC4C,KAAD,EAAW;AAC7C,YAAIA,MAAMP,MAAN,GAAe,EAAnB,EAAuB;AACrB,iBAAO,KAAP;AACD;;AAED,YAAIO,MAAM,CAAN,MAAa,MAAjB,EAAyB;AACvB,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD,OAVmB,EAUjBX,GAViB,CAUZ,UAACY,OAAD,EAAa;AACnB,YAAIA,QAAQR,MAAR,KAAmB,EAAnB,IAAyBQ,QAAQR,MAAR,KAAmB,EAAhD,EAAoD;AAClD,cAAMhC,QAAO,OAAKyC,YAAL,CAAkBrB,MAAlB,EAA0BoB,QAAQ,CAAR,CAA1B,CAAb;;AAEA,cAAME,IAAI;AACR1C,kBAAMA,KADE;AAERC,qBAASuC,QAAQ,CAAR,CAFD;AAGRG,mBAAOH,QAAQ,CAAR,CAHC;AAIRI,oBAAQJ,QAAQ,CAAR,CAJA;AAKRK,oBAAQL,QAAQ,CAAR,CALA;AAMRM,mBAAON,QAAQ,CAAR,CANC;AAORO,mBAAOP,QAAQ,CAAR;AAPC,WAAV;;AAUA,cAAIA,QAAQR,MAAR,KAAmB,EAAvB,EAA2B;AACzBU,cAAEG,MAAF,GAAWL,QAAQ,CAAR,CAAX;AACAE,cAAEK,KAAF,GAAUP,QAAQ,EAAR,CAAV;AACAE,cAAEI,KAAF,GAAU,EAAV;AACD;;AAED,iBAAOJ,CAAP;AACD;;AAED,eAAO;AACLzC,mBAAS,IADJ;AAELD,gBAAMA,IAFD;AAGL2C,iBAAOH,QAAQ,CAAR,CAHF;AAILI,kBAAQJ,QAAQ,CAAR,CAJH;AAKLQ,sBAAYR,QAAQ,CAAR,CALP;AAMLO,iBAAOP,QAAQ,EAAR;AANF,SAAP;AAQD,OAzCmB,CAApB;;AA2CA,aAAOF,WAAP;AACD;;;iCAEYW,U,EAAYC,U,EAAY;AACnC,UAAMC,QAAQF,WAAWG,KAAX,CAAiB,GAAjB,CAAd;AACA,UAAMC,YAAYC,SAASH,MAAM,CAAN,CAAT,CAAlB;AACA,UAAMI,UAAUD,SAASH,MAAM,CAAN,CAAT,CAAhB;;AAEA,UAAMK,OAAON,WAAWE,KAAX,CAAiB,GAAjB,CAAb;;AAEA,UAAMK,QAAQ,KAAKC,SAAL,CAAeF,KAAK,CAAL,EAAQG,IAAR,EAAf,EAA+BN,SAA/B,EAA0CE,OAA1C,EAAmDK,MAAnD,CAA0D,YAA1D,CAAd;AACA,UAAMC,MAAM,KAAKH,SAAL,CAAeF,KAAK,CAAL,EAAQG,IAAR,EAAf,EAA+BN,SAA/B,EAA0CE,OAA1C,EAAmDK,MAAnD,CAA0D,YAA1D,CAAZ;;AAEA,aAAO;AACLH,oBADK;AAELI;AAFK,OAAP;AAID;;;8BAESX,U,EAAYG,S,EAAWE,O,EAAS;AACxC,UAAMO,QAAQtF,OAAO0E,UAAP,EAAmB,QAAnB,CAAd;;AAEA;AACA,UAAIY,MAAMC,KAAN,MAAiB,CAAjB,IAAsBD,MAAMC,KAAN,KAAgB,EAA1C,EAA8C;AAC5CD,cAAM1D,IAAN,CAAWiD,SAAX;AACD,OAFD,MAGK;AACHS,cAAM1D,IAAN,CAAWmD,OAAX;AACD;;AAED,aAAOO,KAAP;AACD;;;0CAEqBE,W,EAAa;AAAA;;AACjC,UAAM/C,IAAI9C,QAAQ+C,IAAR,CAAa8C,WAAb,CAAV;AACA,UAAM7C,OAAOF,EAAE,kBAAF,CAAb;AACA,UAAMV,UAAU,EAAhB;;AAEAY,WAAKI,IAAL,CAAW,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzBlB,gBAAQ6B,IAAR,CAAa,OAAK6B,cAAL,CAAoBhD,CAApB,EAAuBQ,GAAvB,CAAb;AACD,OAFD;;AAIA,aAAOlB,OAAP;AACD;;;mCAEcU,C,EAAGQ,G,EAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMQ,OAAOR,IAAI,YAAJ,EAAkBJ,IAAlB,EAAb;AACA,UAAM6C,cAAczC,IAAI,WAAJ,EAAiBJ,IAAjB,EAApB;AACA,UAAM8C,aAAa1C,IAAI,aAAJ,EAAmBJ,IAAnB,EAAnB;AACA,UAAI+C,oBAAoB3C,IAAI,iBAAJ,EAAuBJ,IAAvB,EAAxB;AACA,UAAMgD,YAAY5C,IAAI,YAAJ,EAAkBJ,IAAlB,EAAlB;AACA,UAAMiD,SAAS7C,IAAI,SAAJ,EAAeJ,IAAf,EAAf;AACA,UAAMkD,SAAS9C,IAAI,SAAJ,EAAeJ,IAAf,EAAf;AACA,UAAMmD,SAAS/C,IAAI,SAAJ,EAAeJ,IAAf,EAAf;AACA,UAAMoD,SAAShD,IAAI,SAAJ,EAAeJ,IAAf,EAAf;AACA,UAAMqD,gBAAgBjD,IAAI,gBAAJ,EAAsBJ,IAAtB,EAAtB;;AAGA,UAAMsD,YAAY1C,KAAKmB,KAAL,CAAW,GAAX,CAAlB;AACA,UAAMwB,WAAWD,UAAUE,GAAV,EAAjB;AACA,UAAMC,YAAYH,UAAUI,IAAV,CAAe,GAAf,CAAlB;AACA,UAAMC,WAAW;AACfC,cAAMf,YAAYgB,UAAZ,CAAuB,GAAvB,CADS;AAEfC,aAAMjB,YAAYgB,UAAZ,CAAuB,GAAvB,CAAD,GAAgC5B,SAASY,YAAYkB,MAAZ,CAAmB,CAAnB,CAAT,CAAhC,GAAkElB;AAFxD,OAAjB;AAIA,UAAMmB,SAAS,EAAf;;AAEC,OAAC5G,MAAM6F,MAAN,CAAD,IAAkBA,OAAOX,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAYkB,SAASgB,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAAC7F,MAAM8F,MAAN,CAAD,IAAkBA,OAAOZ,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAYkB,SAASiB,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAAC9F,MAAM+F,MAAN,CAAD,IAAkBA,OAAOb,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAYkB,SAASkB,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;AACC,OAAC/F,MAAMgG,MAAN,CAAD,IAAkBA,OAAOd,IAAP,GAAc3B,MAAd,KAAyB,CAA5C,GAAiDqD,OAAOjD,IAAP,CAAYkB,SAASmB,MAAT,CAAZ,CAAjD,GAAiF,IAAjF;;AAEAL,0BAAoBA,kBAAkBkB,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CAApB;AACAlB,0BAAoBA,kBAAkBkB,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAApB;AACA,UAAMC,iBAAiBC,WAAWpB,iBAAX,CAAvB;;AAEA,aAAO;AACLU,4BADK;AAELF,0BAFK;AAGLT,oBAAYb,SAASa,UAAT,CAHP;AAILE,mBAAWf,SAASe,SAAT,CAJN;AAKLK,uBAAepB,SAASoB,aAAT,CALV;AAMLW,sBANK;AAOLL,0BAPK;AAQLO;AARK,OAAP;AAUD;;;;;;AAGHE,OAAOC,OAAP,GAAiB;AACf/G;AADe,CAAjB","file":"update.js","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs');\nconst path = require('path');\nconst request = require('request');\nconst moment = require('moment');\nconst isNil = require('lodash/isNil');\n\nconst resultsApi = require('../../db/resultsApi');\n\nclass EspnUpdater {\n\n  update(htmlFile) {\n    return new Promise( (resolve, reject) => {\n      this.updateSchedules(htmlFile).then( (schedules) => {\n        this.updateScheduleDetails(schedules);\n        resolve();\n      });\n    });\n    // for each schedule fill in the details\n  }\n\n  updateSchedules(htmlFile) {\n    const promise = new Promise( (resolve, reject) => {\n      const webSchedules = this.getSchedule(htmlFile);\n\n      const savedSchedules = resultsApi.getSchedules().then( (err, schedules) => {\n        const schedulesToFix = webSchedules.filter( (ws) => {\n          if (isNil(schedules)) {\n            return true;\n          }\n\n          const found = schedules.find( (ss) => {\n            if (ss.date === ws.date && !isNil(ss.espnUrl)) {\n              return ss.complete;\n            }\n\n            return false;\n          });\n        });\n\n        // save these new schedules\n        resultsApi.saveTourSchedule({year: 2018}, schedulesToFix);\n\n        resolve(schedulesToFix);\n      });\n    });\n\n    return promise;\n  }\n\n  updateScheduleDetails(schedules) {\n    schedules.forEach( (schedule) => {\n      const results = this.getScheduleResults(schedule);\n    });\n  }\n\n  getSchedule(htmlFile) {\n\n    let html;\n\n    if (!isNil(htmlFile)) {\n      const data = fs.readFileSync(htmlFile).toString();\n      return this.scrapeSchdule(data);\n    }\n    else {\n      request.get('http://www.espn.com/golf/schedule', (err, response, body) => {\n        return this.scrapeSchdule(body);\n      });\n    }\n  }\n\n  getScheduleResults(schedule) {\n    // request.get(schedule.espnUrl, (err, response, body) => {\n    //   return this.scrapeScheduleResults(body);\n    // });\n  }\n\n  scrapeSchdule(html) {\n    const $ = cheerio.load(html);\n    const rows = $('tr');\n\n    const season = $($('select option')[1]).text();\n\n    const entries = [];\n\n    rows.each( (index, row) => {\n      const tds = $('td', '', row);\n\n      const texts = tds.map( (index, td) => {\n\n        let elm = td;\n\n        if (td.children.length > 0 && td.children[0].name === 'b') {\n          elm = td.children[0];\n        }\n\n        const a = $('a', '', elm);\n        const arr = [];\n\n        if (!isNil(a)) {\n          arr.push(a.attr('href'));\n        }\n\n        if (elm.children.length > 1) {\n          arr.push($(elm.children[0]).text());\n          arr.push($(elm.children[2]).text());\n        }\n        else {\n          arr.push($(td).text());\n        }\n\n        return arr;\n      }).get();\n\n      entries.push(texts);\n    }).get();\n\n    const tournaments = entries.filter( (entry) => {\n      if (entry.length < 10) {\n        return false;\n      }\n\n      if (entry[1] === 'DATE') {\n        return false;\n      }\n\n      return true;\n    }).map( (tourney) => {\n      if (tourney.length === 10 || tourney.length === 11) {\n        const date = this.sanitizeDate(season, tourney[1]);\n\n        const t = {\n          date: date,\n          espnUrl: tourney[2],\n          title: tourney[3],\n          course: tourney[4],\n          winner: tourney[6],\n          score: tourney[8],\n          purse: tourney[9]\n        };\n\n        if (tourney.length === 11) {\n          t.winner = tourney[8];\n          t.purse = tourney[10];\n          t.score = ''\n        }\n\n        return t;\n      }\n\n      return {\n        espnUrl: null,\n        date: date,\n        title: tourney[4],\n        course: tourney[5],\n        lastWinner: tourney[9],\n        purse: tourney[11]\n      };\n    });\n\n    return tournaments;\n  }\n\n  sanitizeDate(seasonText, dateString) {\n    const years = seasonText.split('-');\n    const startYear = parseInt(years[0]);\n    const endYear = parseInt(years[1]);\n\n    const days = dateString.split('-');\n\n    const start = this.parseDate(days[0].trim(), startYear, endYear).format('MM/DD/YYYY');\n    const end = this.parseDate(days[1].trim(), startYear, endYear).format('MM/DD/YYYY');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  parseDate(dateString, startYear, endYear) {\n    const mDate = moment(dateString, 'MMM DD');\n\n    // if it's between october and december its last year\n    if (mDate.month() >= 9 && mDate.month() < 12) {\n      mDate.year(startYear);\n    }\n    else {\n      mDate.year(endYear);\n    }\n\n    return mDate;\n  }\n\n  scrapeScheduleResults(resultsPage) {\n    const $ = cheerio.load(resultsPage);\n    const rows = $('.player-overview');\n    const results = [];\n\n    rows.each( (index, row) => {\n      results.push(this.parseResultRow($, row));\n    });\n\n    return results;\n  }\n\n  parseResultRow($, row) {\n    // const name = $('.full-name', '', row).text();\n    // const positionStr = $('.position', '', row).text();\n    // const totalScore = $('.totalScore', '', row).text();\n    // let officialAmountStr = $('.officialAmount', '', row).text();\n    // const cupPoints = $('.cupPoints', '', row).text();\n    // const round1 = $('.round1', '', row).text();\n    // const round2 = $('.round2', '', row).text();\n    // const round3 = $('.round3', '', row).text();\n    // const round4 = $('.round4', '', row).text();\n    // const relativeScore = $('.relativeScore', '', row).text();\n\n    const name = row('.full-name').text();\n    const positionStr = row('.position').text();\n    const totalScore = row('.totalScore').text();\n    let officialAmountStr = row('.officialAmount').text();\n    const cupPoints = row('.cupPoints').text();\n    const round1 = row('.round1').text();\n    const round2 = row('.round2').text();\n    const round3 = row('.round3').text();\n    const round4 = row('.round4').text();\n    const relativeScore = row('.relativeScore').text();\n\n\n    const nameArray = name.split(' ');\n    const lastName = nameArray.pop();\n    const firstName = nameArray.join(' ');\n    const position = {\n      tied: positionStr.startsWith('T'),\n      pos: (positionStr.startsWith('T')) ? parseInt(positionStr.substr(1)) : positionStr\n    };\n    const rounds = [];\n\n    (!isNil(round1) && round1.trim().length !== 0) ? rounds.push(parseInt(round1)) : null;\n    (!isNil(round2) && round2.trim().length !== 0) ? rounds.push(parseInt(round2)) : null;\n    (!isNil(round3) && round3.trim().length !== 0) ? rounds.push(parseInt(round3)) : null;\n    (!isNil(round4) && round4.trim().length !== 0) ? rounds.push(parseInt(round4)) : null;\n\n    officialAmountStr = officialAmountStr.replace(/,/g, '');\n    officialAmountStr = officialAmountStr.replace(/\\$/g, '');\n    const officialAmount = parseFloat(officialAmountStr);\n\n    return {\n      firstName,\n      lastName,\n      totalScore: parseInt(totalScore),\n      cupPoints: parseInt(cupPoints),\n      relativeScore: parseInt(relativeScore),\n      rounds,\n      position,\n      officialAmount\n    };\n  }\n}\n\nmodule.exports = {\n  EspnUpdater\n};\n"]}