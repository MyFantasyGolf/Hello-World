{"version":3,"sources":["../../../../src/scrapers/espn/update.js"],"names":["cheerio","require","fs","path","request","asyncRequest","moment","sleep","isNil","season","resultsApi","EspnUpdater","html","updateSchedules","schedulez","webSchedules","scrapeSchdule","getSchedules","year","schedules","schedulesToFix","filter","ws","found","find","ss","key","title","toLowerCase","replace","complete","forEach","schedule","saveTourSchedule","getSeason","espnUrl","console","log","results","scrapeScheduleResults","saveResults","date","end","isBefore","sleeper","parseInt","Math","random","$","load","rows","seasonString","text","entries","each","index","row","tds","texts","map","td","elm","children","length","name","a","arr","push","attr","get","tournaments","entry","tourney","sanitizeDate","start","t","course","winner","score","purse","lastWinner","seasonText","dateString","years","split","startYear","endYear","days","parseDate","trim","format","mDate","month","resultsPage","parseResultRow","positionStr","totalScore","officialAmountStr","cupPoints","round1","round2","round3","round4","relativeScore","nameArray","lastName","pop","firstName","join","position","tied","startsWith","pos","substr","rounds","officialAmount","parseFloat","module","exports"],"mappings":"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","file":"update.js","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs');\nconst path = require('path');\nconst request = require('request');\nconst asyncRequest = require('request-promise');\nconst moment = require('moment');\nconst sleep = require('sleep');\nconst isNil = require('lodash/isNil');\n\nconst season = require('../../utils/season');\nconst resultsApi = require('../../db/resultsApi');\n\nclass EspnUpdater {\n\n  async update() {\n    const html = await asyncRequest('http://www.espn.com/golf/schedule');\n    const schedulez = await this.updateSchedules(html);\n  }\n\n  async updateSchedules(html) {\n    const webSchedules = this.scrapeSchdule(html);\n\n    const schedules = await resultsApi.getSchedules(webSchedules[0].year);\n    const schedulesToFix = webSchedules.filter( (ws) => {\n      if (isNil(schedules)) {\n        return true;\n      }\n\n      const found = schedules.find( (ss) => {\n        if (ss.key === ws.title.toLowerCase().replace(/ /g, '')) {\n          return ss.complete;\n        }\n\n        return false;\n      });\n\n      return true;\n    });\n\n    // save these new schedules\n    schedulesToFix.forEach( (schedule) => {\n      schedule.complete = false;\n      resultsApi.saveTourSchedule(schedule)\n    });\n\n    return schedulesToFix;\n  }\n\n  /**\n  Run through the schedules and try to fill in results for\n  tournaments that have them.\n  **/\n  async updateResults() {\n\n    const year = season.getSeason();\n\n    const schedules = await resultsApi.getSchedules(year);\n\n    schedules.forEach( async (schedule) => {\n\n      if (schedule.complete === true || isNil(schedule.espnUrl)) {\n        console.log(`Skipping ${schedule.title}`);\n        return;\n      }\n\n      console.log(`Retrieving results for ${schedule.title}`);\n\n      const html = await asyncRequest(`http://espn.com${schedule.espnUrl}`);\n      if (!isNil(html)) {\n        const results = this.scrapeScheduleResults(html);\n        await resultsApi.saveResults(schedule, results);\n\n        if (moment(schedule.date.end, 'MM/DD/YYYY').isBefore(moment())) {\n          schedule.complete = true;\n          await resultsApi.saveTourSchedule(schedule);\n          console.log(`${schedule.title} successfully saved.`);\n        }\n      }\n\n      const sleeper = parseInt((Math.random() * 3) + 1);\n      console.log(`Sleeping for ${sleeper} seconds.\\n`);\n      sleep.sleep(sleeper);\n    });\n  }\n\n  scrapeSchdule(html) {\n    const $ = cheerio.load(html);\n    const rows = $('tr');\n\n    const seasonString = $($('select option')[1]).text();\n\n    const entries = [];\n\n    rows.each( (index, row) => {\n      const tds = $('td', '', row);\n\n      const texts = tds.map( (index, td) => {\n\n        let elm = td;\n\n        if (td.children.length > 0 && td.children[0].name === 'b') {\n          elm = td.children[0];\n        }\n\n        const a = $('a', '', elm);\n        const arr = [];\n\n        if (!isNil(a)) {\n          arr.push(a.attr('href'));\n        }\n\n        if (elm.children.length > 1) {\n          arr.push($(elm.children[0]).text());\n          arr.push($(elm.children[2]).text());\n        }\n        else {\n          arr.push($(td).text());\n        }\n\n        return arr;\n      }).get();\n\n      entries.push(texts);\n    }).get();\n\n    const tournaments = entries.filter( (entry) => {\n      if (entry.length < 10) {\n        return false;\n      }\n\n      if (entry[1] === 'DATE') {\n        return false;\n      }\n\n      return true;\n    }).map( (tourney) => {\n\n      const date = this.sanitizeDate(seasonString, tourney[1]);\n      const year = season.getSeason(moment(date.start, 'MM/DD/YYYY'));\n\n      if (tourney.length === 10 || tourney.length === 11) {\n\n        const t = {\n          date: date,\n          year,\n          espnUrl: tourney[2],\n          title: tourney[3],\n          course: tourney[4],\n          winner: tourney[6],\n          score: tourney[8],\n          purse: tourney[9]\n        };\n\n        if (tourney.length === 11) {\n          t.winner = tourney[8];\n          t.purse = tourney[10];\n          t.score = ''\n        }\n\n        return t;\n      }\n\n      return {\n        espnUrl: null,\n        year,\n        date: date,\n        title: tourney[4],\n        course: tourney[5],\n        lastWinner: tourney[9],\n        purse: tourney[11]\n      };\n    });\n\n    return tournaments;\n  }\n\n  sanitizeDate(seasonText, dateString) {\n    const years = seasonText.split('-');\n    const startYear = parseInt(years[0]);\n    let endYear = parseInt(years[1]);\n\n    if (endYear < 2000) {\n      endYear = endYear + 2000;\n    }\n\n    const days = dateString.split('-');\n\n    const start = this.parseDate(days[0].trim(), startYear, endYear).format('MM/DD/YYYY');\n    const end = this.parseDate(days[1].trim(), startYear, endYear).format('MM/DD/YYYY');\n\n    return {\n      start,\n      end\n    };\n  }\n\n  parseDate(dateString, startYear, endYear) {\n    const mDate = moment(dateString, 'MMM DD');\n\n    // if it's between october and december its last year\n    if (mDate.month() >= 9 && mDate.month() < 12) {\n      mDate.year(startYear);\n    }\n    else {\n      mDate.year(endYear);\n    }\n\n    return mDate;\n  }\n\n  /**\n  This is where we look for the results of everything\n  **/\n  scrapeScheduleResults(resultsPage) {\n    const $ = cheerio.load(resultsPage);\n    const rows = $('.player-overview');\n    const results = [];\n\n    rows.each( (index, row) => {\n      results.push(this.parseResultRow($, row));\n    });\n\n    return results;\n  }\n\n  parseResultRow($, row) {\n    const name = $('.full-name', '', row).text();\n    const positionStr = $('.position', '', row).text();\n    const totalScore = $('.totalScore', '', row).text();\n    let officialAmountStr = $('.officialAmount', '', row).text();\n    const cupPoints = $('.cupPoints', '', row).text();\n    const round1 = $('.round1', '', row).text();\n    const round2 = $('.round2', '', row).text();\n    const round3 = $('.round3', '', row).text();\n    const round4 = $('.round4', '', row).text();\n    const relativeScore = $('.relativeScore', '', row).text();\n\n    // const name = row('.full-name').text();\n    // const positionStr = row('.position').text();\n    // const totalScore = row('.totalScore').text();\n    // let officialAmountStr = row('.officialAmount').text();\n    // const cupPoints = row('.cupPoints').text();\n    // const round1 = row('.round1').text();\n    // const round2 = row('.round2').text();\n    // const round3 = row('.round3').text();\n    // const round4 = row('.round4').text();\n    // const relativeScore = row('.relativeScore').text();\n\n\n    const nameArray = name.split(' ');\n    const lastName = nameArray.pop();\n    const firstName = nameArray.join(' ');\n    const position = {\n      tied: positionStr.startsWith('T'),\n      pos: (positionStr.startsWith('T')) ? parseInt(positionStr.substr(1)) : positionStr\n    };\n    const rounds = [];\n\n    (!isNil(round1) && round1.trim().length !== 0) ? rounds.push(parseInt(round1)) : null;\n    (!isNil(round2) && round2.trim().length !== 0) ? rounds.push(parseInt(round2)) : null;\n    (!isNil(round3) && round3.trim().length !== 0) ? rounds.push(parseInt(round3)) : null;\n    (!isNil(round4) && round4.trim().length !== 0) ? rounds.push(parseInt(round4)) : null;\n\n    officialAmountStr = officialAmountStr.replace(/,/g, '');\n    officialAmountStr = officialAmountStr.replace(/\\$/g, '');\n    const officialAmount = parseFloat(officialAmountStr);\n\n    return {\n      firstName,\n      lastName,\n      key: `${firstName.toLowerCase().replace(/[\\. ,:-]+/g, '')}+${lastName.toLowerCase().replace(/[\\. ,:-]+/g, '')}`,\n      totalScore: parseInt(totalScore),\n      cupPoints: parseInt(cupPoints),\n      relativeScore: parseInt(relativeScore),\n      rounds,\n      position,\n      officialAmount\n    };\n  }\n}\n\nmodule.exports = {\n  EspnUpdater\n};\n"]}