{"version":3,"sources":["../../src/app.js"],"names":["path","require","express","espn","espnPlayers","fs","bodyParser","session","isNil","user_service","league_service","roster_service","pga_service","app","use","secret","resave","saveUninitialized","urlencoded","extended","json","get","request","response","updater","EspnUpdater","update","send","updateResults","console","log","file","resolve","__dirname","data","readFileSync","toString","playerResults","scrapeScheduleResults","pup","EspnPlayerUpdater","updatePlayers","players","post","registerUser","login","logout","getUser","getUsers","getGolfers","getMyLeagues","getLeague","createLeague","getActiveRoster","getAvailablePlayers","getDraftList","put","updateDraftList","startDraft","getDraft","getDraftStatus","makeDraftPick","getMyInvitations","acceptInvitation","delete","declineInvitation","listen"],"mappings":"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","file":"app.js","sourcesContent":["const path = require('path');\nconst express = require('express');\nconst espn = require('./scrapers/espn/update');\nconst espnPlayers = require('./scrapers/espn/playerUpdate');\nconst fs = require('fs');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\n\nconst isNil = require('lodash/isNil');\nconst user_service = require('./services/userManagement');\nconst league_service = require('./services/leagueManagement');\nconst roster_service = require('./services/rosterManagement');\nconst pga_service = require('./services/pgaService');\n\nconst app = express();\n\napp.use(session({\n  secret: 'UniqueFantasyGolf',\n  resave: true,\n  saveUninitialized: false\n}));\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\napp.use(bodyParser.json());\n\napp.get('/update', async (request, response) => {\n\n  // try espn first\n  const updater = new espn.EspnUpdater();\n  //\n  // await updater.update(path.resolve(__dirname, '..', 'test', 'files', 'espn-schedule.html'));\n  //\n  // //now do the players\n  // const file = path.resolve(__dirname, '..', 'test', 'files', 'results.html');\n  // await updater.updateResults(file);\n  updater.update();\n\n  response.send();\n});\n\napp.get('/api/updateResults', async (request, response) => {\n  const updater = new espn.EspnUpdater();\n\n  await updater.updateResults();\n  console.log('Done.');\n  response.send();\n});\n\napp.get('/api/scoreUpdate', (request, response) => {\n  const file = path.resolve(__dirname, '..', 'test', 'files', 'schedule.html');\n  const data = fs.readFileSync(file).toString();\n  const playerResults = espn.scrapeScheduleResults(data);\n  response.send(playerResults);\n});\n\napp.get('/api/updateRoster', async (request, response) => {\n  const file = path.resolve(__dirname, '..', 'test', 'files', 'players.html');\n  const pup = new espnPlayers.EspnPlayerUpdater();\n  const players = await pup.updatePlayers(file);\n  response.send(players);\n});\n\napp.post('/api/register', user_service.registerUser);\napp.post('/api/login', user_service.login);\napp.post('/api/logout', user_service.logout);\napp.get('/api/currentUser', user_service.getUser);\napp.get('/api/users', user_service.getUsers);\n\n// players\napp.get('/api/golfers/:season', pga_service.getGolfers);\n\n// leagues\napp.get('/api/myleagues', league_service.getMyLeagues);\n\napp.get('/api/league/:leagueId', league_service.getLeague);\napp.post('/api/league', league_service.createLeague);\napp.get('/api/league/:leagueId/myActiveRoster', roster_service.getActiveRoster);\n\napp.get('/api/league/:leagueId/availablePlayers', league_service.getAvailablePlayers);\napp.get('/api/league/:leagueId/draftList', league_service.getDraftList);\napp.put('/api/league/:leagueId/draftList', league_service.updateDraftList);\n\napp.post('/api/league/:leagueId/draft', league_service.startDraft);\napp.get('/api/league/:leagueId/draft', league_service.getDraft);\napp.get('/api/league/:leagueId/draft/status', league_service.getDraftStatus);\napp.put('/api/league/:leagueId/draft/:round/:pick', league_service.makeDraftPick);\n\napp.get('/api/invites', league_service.getMyInvitations);\napp.put('/api/invite/accept/:leagueId/:teamName', league_service.acceptInvitation);\napp.delete('/api/invite/decline/:leagueId', league_service.declineInvitation);\n\napp.listen(3000, () => console.log('MyFantasyGolf app listening on port 3000!'))\n"]}